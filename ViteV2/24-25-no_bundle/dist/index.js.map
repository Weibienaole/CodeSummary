{"version":3,"sources":["../src/node/cli.ts","../server.ts","../src/optimizer/index.ts","../src/constant/index.ts","../src/optimizer/scanPlugin.ts","../src/optimizer/preBundlePlugin.ts","../src/utils.ts"],"sourcesContent":["import cac from 'cac'\n\nimport { startDevServer } from '../../server'\n\nconst root = process.cwd()\n\nconst cli = cac()\n\ncli\n  .command('[root]', 'Run the development server')\n  .alias('server')\n  .alias('dev')\n  .action(async () => {\n    await startDevServer()\n  })\n\ncli.help()\n\ncli.parse()\n","import connect from 'connect'\nimport { blue, green } from 'picocolors'\nimport { optimizer } from './src/optimizer'\n\n\nexport const startDevServer = async () => {\n  const app = connect()\n  const root = process.cwd()\n  const startTime = Date.now()\n  app.listen(3000, async () => {\n    await optimizer(root)\n    console.log(\n      green('üöÄ No-Bundle ÊúçÂä°Â∑≤ÁªèÊàêÂäüÂêØÂä®!'),\n      `ËÄóÊó∂Ôºö${Date.now() - startTime} ms`\n    )\n    console.log(`> Êú¨Âú∞ËÆøÈóÆË∑ØÂæÑ: ${blue('http://localhost:3000')}`)\n  })\n}\n","import { build } from 'esbuild'\nimport path from 'path'\nimport { green } from 'picocolors'\n\nimport { scanPlugins } from './scanPlugin'\nimport { PRE_BUNDLE_DIR } from '../constant'\nimport { preBundlePlugin } from './preBundlePlugin'\n\nexport const optimizer = async (root) => {\n  // 1. Á°ÆÂÆöÂÖ•Âè£\n  const entry = path.resolve(root, 'src/main.tsx')\n  // 2. ‰ªéÂÖ•Âè£Â§ÑÊâ´Êèè‰æùËµñ\n  const deps = new Set<string>()\n  await build({\n    entryPoints: [entry],\n    bundle: true,\n    write: false,\n    plugins: [await scanPlugins(deps)]\n  })\n  console.log(\n    `${green('ÈúÄË¶ÅÈ¢ÑÊûÑÂª∫ÁöÑ‰æùËµñ')}:\\n${[...deps]\n      .map(green)\n      .map((item) => `  ${item}`)\n      .join('\\n')}`\n  )\n  // 3. È¢ÑÊûÑÂª∫‰æùËµñ\n  await build({\n    entryPoints: [...deps],\n    bundle: true,\n    write: true,\n    splitting: true,\n    format: 'esm',\n    outdir: path.resolve(root, PRE_BUNDLE_DIR),\n    plugins: [await preBundlePlugin(deps)]\n  })\n}\n","import path from 'path'\n\nexport const EXTERNAL_TYPES = [\n  \"css\",\n  \"less\",\n  \"sass\",\n  \"scss\",\n  \"styl\",\n  \"stylus\",\n  \"pcss\",\n  \"postcss\",\n  \"vue\",\n  \"svelte\",\n  \"marko\",\n  \"astro\",\n  \"png\",\n  \"jpe?g\",\n  \"gif\",\n  \"svg\",\n  \"ico\",\n  \"webp\",\n  \"avif\",\n];\n\nexport const BARE_IMPORT_RE = /^[\\w@][^:]/;\n\nexport const PRE_BUNDLE_DIR = path.join('node_modules', '.m-vite')\n","import { Plugin } from 'esbuild'\nimport { BARE_IMPORT_RE, EXTERNAL_TYPES } from '../constant'\n\nexport async function scanPlugins(deps: Set<string>): Promise<Plugin> {\n  return Promise.resolve({\n    name: 'plugin:scan',\n    setup(build) {\n      build.onResolve(\n        {\n          filter: new RegExp(`\\\\.(${EXTERNAL_TYPES.join('|')})$`)\n        },\n        // Â∞ÜÊåáÂÆöÁ±ªÂûãÊñá‰ª∂ÊéíÈô§„ÄÇ\n        ({ path }) => {\n          return {\n            path,\n            external: true\n          }\n        }\n      )\n      // ËÆ∞ÂΩï‰æùËµñ\n      build.onResolve({ filter: BARE_IMPORT_RE }, (resolveInfo) => {\n        const { path: id } = resolveInfo\n        deps.add(id)\n        return {\n          path: id,\n          external: true\n        }\n      })\n    }\n  })\n}\n","import { Loader, Plugin } from 'esbuild'\nimport path from 'path'\nimport resolve from 'resolve'\nimport { init, parse } from 'es-module-lexer'\nimport fs from 'fs-extra'\n\nimport { BARE_IMPORT_RE } from '../constant'\nimport { normalizePath } from '../utils'\n// import createDebug from 'debug'\n\n// const debug = createDebug('dev')\n\nexport async function preBundlePlugin(deps: Set<string>): Promise<Plugin> {\n  return Promise.resolve({\n    name: 'plugin:pre-bundle',\n    setup(build) {\n      build.onResolve({ filter: BARE_IMPORT_RE }, (resolveInfo) => {\n        const { path: id, importer } = resolveInfo\n        const isEntry = !importer\n        if (deps.has(id)) {\n          return isEntry\n            ? {\n                path: id,\n                namespace: 'dep'\n              }\n            : {\n                path: resolve.sync(id, { basedir: process.cwd() })\n              }\n        }\n      })\n\n      build.onLoad({ filter: /.*/, namespace: 'dep' }, async (loadInfo) => {\n        await init\n        const root = process.cwd()\n        const id = loadInfo.path\n        const entryPath = normalizePath(resolve.sync(id, { basedir: root }))\n        const entryFile = await fs.readFile(entryPath, 'utf-8')\n        const [imports, exports] = await parse(entryPath)\n        const proxyModules: string[] = []\n        if (!imports.length && !exports.length) {\n          // cjs\n          const cjsFile = require(entryPath)\n          const cjsFileImports = Object.keys(cjsFile)\n          proxyModules.push(\n            `export { ${cjsFileImports.join(',')} } from '${entryPath}'`,\n            `export default require('${entryPath}')`\n          )\n        } else {\n          // esm\n          if (exports.includes('default')) {\n            proxyModules.push(`import d from '${entryPath}';export default d`)\n          }\n          proxyModules.push(`export * from '${entryPath}'`)\n        }\n        // debug('‰ª£ÁêÜÊ®°ÂùóÂÜÖÂÆπ: %o:\\n ' + proxyModules.join('\\n'))\n        const loader = path.extname(entryPath).slice(1) as Loader\n        return {\n          loader,\n          contents: proxyModules.join('\\n'),\n          resolveDir: root\n        }\n      })\n    }\n  })\n}\n","import os from 'os'\nimport path from 'path'\n\nexport const slash = (p) => {\n  return p.replace(/\\\\/g, '/')\n}\n\nexport const isWindows = os.platform() === 'win32'\n\nexport const normalizePath = (id: string): string =>\n  path.posix.normalize(isWindows ? slash(id) : id)\n"],"mappings":"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","names":["import_picocolors","import_path","path","build","path","import_path","import_path","os","path","build","resolve","root","fs","path","root","path","connect","root","cac"]}