{"version":3,"sources":["../src/node/cli.ts","../src/node/server/index.ts","../src/node/optimizer/index.ts","../src/constant/index.ts","../src/node/optimizer/scanPlugin.ts","../src/node/optimizer/preBundlePlugin.ts","../src/node/utils.ts","../src/node/pluginContainer.ts","../src/node/plugins/assets.ts","../src/node/plugins/clientInject.ts","../src/node/plugins/css.ts","../src/node/plugins/esbuild.ts","../src/node/plugins/importAnalysis.ts","../src/node/plugins/resolve.ts","../src/node/plugins/index.ts","../src/node/server/middlewares/indexHtml.ts","../src/node/server/middlewares/trasnform.ts","../src/node/server/middlewares/static.ts","../src/node/ModuleGraph.ts","../src/node/ws.ts","../src/node/hmr.ts"],"sourcesContent":["import cac from 'cac'\n\nimport { startDevServer } from './server'\n\nconst root = process.cwd()\n\nconst cli = cac()\n\ncli\n  .command('[root]', 'Run the development server')\n  .alias('server')\n  .alias('dev')\n  .action(async () => {\n    await startDevServer()\n  })\n\ncli.help()\n\ncli.parse()\n","import connect from 'connect'\nimport { blue, green } from 'picocolors'\nimport chokidar, { FSWatcher } from 'chokidar'\n\nimport { optimizer } from '../optimizer'\nimport { Plugin } from '../plugin'\nimport { PluginContainer, createPluginContainer } from '../pluginContainer'\nimport { resolvePlugins } from '../plugins'\nimport { indexHtmlMiddleware } from './middlewares/indexHtml'\nimport { transformMiddleware } from './middlewares/trasnform'\nimport { staticMiddleware } from './middlewares/static'\nimport { ModuleGraph } from '../ModuleGraph'\nimport { normalizePath } from '../utils'\nimport { createWebSocketServer } from '../ws'\nimport { bindingHMREvents } from '../hmr'\n\nexport interface ServerContext {\n  root: string\n  pluginContainer: PluginContainer\n  app: connect.Server\n  plugins: Plugin[]\n  moduleGraph: ModuleGraph\n  ws: { send: (data: any) => void; close: () => void }\n  watcher: FSWatcher\n}\n\nexport const startDevServer = async () => {\n  const app = connect()\n  const root = process.cwd()\n  const startTime = Date.now()\n\n  const plugins = resolvePlugins()\n  const pluginContainer = createPluginContainer(plugins)\n\n  const moduleGraph = new ModuleGraph((url) => pluginContainer.resolveId(url))\n\n  const watcher = chokidar.watch(root, {\n    ignored: ['**/node_modules/**', '**/.git/**'],\n    ignoreInitial: true\n  })\n\n  const ws = createWebSocketServer(app)\n\n  const serverContext: ServerContext = {\n    root: normalizePath(process.cwd()),\n    app,\n    pluginContainer,\n    plugins,\n    moduleGraph,\n    ws,\n    watcher\n  }\n\n  for (const plugin of plugins) {\n    if (plugin.configureServer) {\n      await plugin.configureServer(serverContext)\n    }\n  }\n\n  // hmr注册\n  bindingHMREvents(serverContext)\n  // 入口文件\n  app.use(indexHtmlMiddleware(serverContext))\n  // code转换\n  app.use(transformMiddleware(serverContext))\n  // 链接类型静态资源接入\n  app.use(staticMiddleware(serverContext.root))\n\n  app.listen(3000, async () => {\n    // 1.预构建\n    await optimizer(root)\n    console.log(\n      green('🚀 No-Bundle 服务已经成功启动!'),\n      `耗时：${Date.now() - startTime} ms`\n    )\n    console.log(`> 本地访问路径: ${blue('http://localhost:3000')}`)\n  })\n}\n","import { build } from 'esbuild'\nimport path from 'path'\nimport { green } from 'picocolors'\n\nimport { scanPlugins } from './scanPlugin'\nimport { PRE_BUNDLE_DIR } from '../../constant'\nimport { preBundlePlugin } from './preBundlePlugin'\n\nexport const optimizer = async (root) => {\n  // 1. 确定入口\n  const entry = path.resolve(root, 'src/main.tsx')\n  \n  // 2. 从入口处扫描依赖\n  const deps = new Set<string>()\n  await build({\n    entryPoints: [entry],\n    bundle: true,\n    write: false,\n    plugins: [await scanPlugins(deps)]\n  })\n  console.log(\n    `${green('需要预构建的依赖')}:\\n${[...deps]\n      .map(green)\n      .map((item) => `  ${item}`)\n      .join('\\n')}`\n  )\n  // 3. 预构建依赖\n  await build({\n    entryPoints: [...deps],\n    bundle: true,\n    write: true,\n    splitting: true,\n    format: 'esm',\n    outdir: path.resolve(root, PRE_BUNDLE_DIR),\n    plugins: [await preBundlePlugin(deps)]\n  })\n  console.log('构建成功！');\n  \n}\n","import path from 'path'\n\nexport const EXTERNAL_TYPES = [\n  'css',\n  'less',\n  'sass',\n  'scss',\n  'styl',\n  'stylus',\n  'pcss',\n  'postcss',\n  'vue',\n  'svelte',\n  'marko',\n  'astro',\n  'png',\n  'jpe?g',\n  'gif',\n  'svg',\n  'ico',\n  'webp',\n  'avif'\n]\n\nexport const BARE_IMPORT_RE = /^[\\w@][^:]/\n\nexport const PRE_BUNDLE_DIR = path.join('node_modules', '.m-vite')\n\nexport const JS_TYPES_RE = /\\.(?:j|t)sx?$|\\.mjs$/\nexport const QEURY_RE = /\\?.*$/s\nexport const HASH_RE = /#.*$/s\n\nexport const DEFAULT_EXTERSIONS = ['.tsx', '.ts', '.jsx', 'js']\n\nexport const HMR_PORT = 12342\n\nexport const CLIENT_PUBLIC_PATH = '/@vite/client'\n\nconst INTERNAL_LIST = [CLIENT_PUBLIC_PATH, '/@react-refresh']\n\nexport function isInternalRequest(url: string): boolean {\n  return INTERNAL_LIST.includes(url)\n}\n","import { Plugin } from 'esbuild'\nimport { BARE_IMPORT_RE, EXTERNAL_TYPES } from '../../constant'\n\nexport async function scanPlugins(deps: Set<string>): Promise<Plugin> {\n  return Promise.resolve({\n    name: 'plugin:scan',\n    setup(build) {\n      build.onResolve(\n        {\n          filter: new RegExp(`\\\\.(${EXTERNAL_TYPES.join('|')})$`)\n        },\n        // 将指定类型文件排除。\n        ({ path }) => {\n          return {\n            path,\n            external: true\n          }\n        }\n      )\n      // 记录依赖\n      build.onResolve({ filter: BARE_IMPORT_RE }, (resolveInfo) => {\n        const { path: id } = resolveInfo\n        deps.add(id)\n        return {\n          path: id,\n          external: true\n        }\n      })\n    }\n  })\n}\n","import { Loader, Plugin } from 'esbuild'\nimport path from 'path'\nimport resolve from 'resolve'\nimport { init, parse } from 'es-module-lexer'\nimport fs from 'fs-extra'\n\nimport { BARE_IMPORT_RE } from '../../constant'\nimport { normalizePath } from '../utils'\nimport createDebug from 'debug'\n\nconst debug = createDebug('dev')\n\nexport async function preBundlePlugin(deps: Set<string>): Promise<Plugin> {\n  return Promise.resolve({\n    name: 'plugin:pre-bundle',\n    setup(build) {\n      build.onResolve({ filter: BARE_IMPORT_RE }, (resolveInfo) => {\n        const { path: id, importer } = resolveInfo\n        const isEntry = !importer\n        if (deps.has(id)) {\n          return isEntry\n            ? {\n                path: id,\n                namespace: 'dep'\n              }\n            : {\n                path: resolve.sync(id, { basedir: process.cwd() })\n              }\n        }\n      })\n\n      build.onLoad({ filter: /.*/, namespace: 'dep' }, async (loadInfo) => {\n        await init\n        const root = process.cwd()\n        const id = loadInfo.path\n        const entryPath = normalizePath(resolve.sync(id, { basedir: root }))\n        const entryFile = await fs.readFile(entryPath, 'utf-8')\n        const [imports, exports] = await parse(entryFile)\n        const proxyModules: string[] = []\n        if (!imports.length && !exports.length) {\n          // cjs\n          const cjsFile = require(entryPath)\n          const cjsFileImports = Object.keys(cjsFile)\n          proxyModules.push(\n            `export { ${cjsFileImports.join(',')} } from '${entryPath}'`,\n            `export default require('${entryPath}')`\n          )\n        } else {\n          // esm\n          if (exports.includes('default')) {\n            proxyModules.push(`import d from '${entryPath}';export default d`)\n          }\n          proxyModules.push(`export * from '${entryPath}'`)\n        }\n        debug('代理模块内容: %o:\\n ' + proxyModules.join('\\n'))\n        const loader = path.extname(entryPath).slice(1) as Loader\n        return {\n          loader,\n          contents: proxyModules.join('\\n'),\n          resolveDir: root\n        }\n      })\n    }\n  })\n}\n","import os from 'os'\nimport path from 'path'\nimport { HASH_RE, JS_TYPES_RE, QEURY_RE } from '../constant'\n\nexport const slash = (p) => {\n  return p.replace(/\\\\/g, '/')\n}\n\nexport const isWindows = os.platform() === 'win32'\n\nexport const normalizePath = (id: string): string =>\n  path.posix.normalize(isWindows ? slash(id) : id)\n\nexport const cleanUrl = (url: string): string =>\n  url.replace(HASH_RE, '').replace(QEURY_RE, '')\n\nexport const isRequestJs = (id: string): boolean => {\n  id = cleanUrl(id)\n  if (JS_TYPES_RE.test(id)) {\n    return true\n  }\n  if (!path.extname(id) && !id.endsWith('/')) {\n    return true\n  }\n  return false\n}\n\nexport const isRequestCss = (id: string): boolean =>\n  cleanUrl(id).endsWith('.css')\n\nexport const isImportRequest = (url: string): boolean => {\n  return url.endsWith('?import')\n}\n\nexport const getShortName = (file: string, root: string) => {\n  return file.startsWith(root + '/') ? path.posix.relative(root, file) : file\n}\n\nexport const removeImportQuery = (url: string): string => {\n  return url.replace(/\\?import$/, '')\n}\n","import type {\n  LoadResult,\n  PartialResolvedId,\n  SourceDescription,\n  PluginContext as RollupPluginContext,\n  ResolvedId\n} from 'rollup'\nimport { Plugin } from './plugin'\n\nexport interface PluginContainer {\n  resolveId(id: string, importer?: string): Promise<PartialResolvedId | null>\n  load(id: string): Promise<LoadResult | null>\n  transform(code: string, id: string): Promise<SourceDescription | null>\n}\n\n// rollup插件机制实现\nexport const createPluginContainer = (plugins: Plugin[]): PluginContainer => {\n  // @ts-ignore 这里仅实现上下文对象的 resolve 方法\n  class Context implements RollupPluginContext {\n    async resolve(id: string, importer?: string) {\n      let out = await pluginContainer.resolveId(id, importer)\n      if (typeof out === 'string') out = { id: out }\n      return out as ResolvedId | null\n    }\n  }\n\n  const pluginContainer: PluginContainer = {\n    async resolveId(id: string, importer?: string) {\n      const ctx = new Context() as any\n      for (const plugin of plugins) {\n        if (plugin.resolveId) {\n          const newId = await plugin.resolveId.call(ctx as any, id, importer)\n          if (newId) {\n            id = typeof newId === 'string' ? newId : newId.id\n            return { id }\n          }\n        }\n      }\n      return null\n    },\n    async load(id: string) {\n      const ctx = new Context() as any\n      for (const plugin of plugins) {\n        if (plugin.load) {\n          const result = await plugin.load.call(ctx, id)\n          if (result) {\n            return result\n          }\n        }\n      }\n      return null\n    },\n    async transform(code: string, id: string) {\n      const ctx = new Context() as any\n      for (const plugin of plugins) {\n        if (plugin.transform) {\n          const result = await plugin.transform.call(ctx, code, id)\n          if (!result) continue\n          if (typeof result === 'string') {\n            code = result\n          } else if (result.code) {\n            code = result.code\n          }\n        }\n      }\n      return { code }\n    }\n  }\n\n  return pluginContainer\n}\n","import { Plugin } from '../plugin'\nimport { ServerContext } from '../server'\nimport {\n  cleanUrl,\n  getShortName,\n  normalizePath,\n  removeImportQuery\n} from '../utils'\n\nexport function assetsPlugin(): Plugin {\n  let serverContext: ServerContext\n  return {\n    name: 'm-vite:assets',\n    configureServer(s) {\n      serverContext = s\n    },\n    async load(id) {\n      const cleanedId = removeImportQuery(cleanUrl(id))\n      const resolvedId = `/${getShortName(normalizePath(id), serverContext.root)}`;\n      if (cleanedId.endsWith('.svg')) {\n        return {\n          code: `export default \"${resolvedId}\"`\n        }\n      }\n    }\n  }\n}\n","import path from 'path'\nimport fs from 'fs-extra'\n\nimport { CLIENT_PUBLIC_PATH, HMR_PORT } from '../../constant'\nimport { Plugin } from '../plugin'\nimport { ServerContext } from '../server'\n\nexport function clientInject(): Plugin {\n  let serverContext: ServerContext\n  return {\n    name: 'm-vite:client-inject',\n    configureServer(s) {\n      serverContext = s\n    },\n    resolveId(id) {\n      if (id === CLIENT_PUBLIC_PATH) {\n        return { id }\n      }\n      return null\n    },\n    load(id) {\n      if (id === CLIENT_PUBLIC_PATH) {\n        const clientPath = path.join(\n          serverContext.root,\n          'node_modules',\n          'mini-vite',\n          'dist',\n          'client.mjs'\n        )\n        const code = fs.readFileSync(clientPath, 'utf-8')\n        return {\n          code: code.replace('__HMR_PORT__', JSON.stringify(HMR_PORT))\n        }\n      }\n    },\n    transformIndexHtml(raw) {\n      const newHtml = raw.replace(\n        /(<head[^>]*>)/i,\n        `$1\n        <script type=\"module\" src=\"${CLIENT_PUBLIC_PATH}\"></script>`\n      )\n      return newHtml\n    }\n  }\n}\n","import fs from 'fs-extra'\n\nimport { Plugin } from '../plugin'\nimport { CLIENT_PUBLIC_PATH } from '../../constant'\nimport { getShortName } from '../utils'\nimport { ServerContext } from '../server'\n\nexport function cssPlugin(): Plugin {\n  let serverContext: ServerContext\n  return {\n    name: 'm-vite:css',\n    configureServer(s) {\n      serverContext = s\n    },\n    load(id) {\n      if (id.endsWith('.css')) {\n        return fs.readFileSync(id, 'utf-8')\n      }\n    },\n    transform(code, id) {\n      if (id.endsWith('.css')) {\n        const jsContent = `\nimport { createHotContext as __vite__createHotContext } from \"${CLIENT_PUBLIC_PATH}\";\nimport.meta.hot = __vite__createHotContext(\"/${getShortName(id, serverContext.root )}\");\nimport { updateStyle, removeStyle } from \"${CLIENT_PUBLIC_PATH}\"\n  \nconst id = '${id}';\nconst css = \\`${code.replace(/\\n/g, \"\").replace(/\"/g, \"'\")}\\`;\n\nupdateStyle(id, css);\nimport.meta.hot.accept();\nexport default css;\nimport.meta.hot.prune(() => removeStyle(id));`.trim();\n        return { code: jsContent }\n      }\n      return null\n    }\n  }\n}\n\n","import fs from 'fs-extra'\nimport esbuild from 'esbuild'\nimport path from 'path'\n\nimport { Plugin } from '../plugin'\nimport { isRequestJs } from '../utils'\n\n// 特殊js脚本通过esbuild转换为js\nexport function esBuildTrasnform(): Plugin {\n  return {\n    name: 'm-vite:esbuild-trasnform',\n    async load(id) {\n      if (isRequestJs(id)) {\n        try {\n          const code = await fs.readFile(id, 'utf-8')\n          return code\n        } catch {\n          return null\n        }\n      }\n    },\n    async transform(code, id) {\n      if (isRequestJs(id)) {\n        const exname = path.extname(id).slice(1)\n        const { code: trasnfromCode, map } = await esbuild.transform(code, {\n          target: 'esnext',\n          format: 'esm',\n          sourcemap: true,\n          loader: exname as 'tsx' | 'jsx' | 'ts' | 'js'\n        })\n        return {\n          code: trasnfromCode,\n          map\n        }\n      }\n      return null\n    }\n  }\n}\n","import { init, parse } from 'es-module-lexer'\nimport MagicString from 'magic-string'\nimport path from 'path'\n\nimport {\n  BARE_IMPORT_RE,\n  CLIENT_PUBLIC_PATH,\n  PRE_BUNDLE_DIR,\n  isInternalRequest\n} from '../../constant'\nimport { Plugin } from '../plugin'\nimport { ServerContext } from '../server'\nimport { cleanUrl, getShortName, isRequestJs, normalizePath } from '../utils'\n\n// import分析，bare import重写产出路径，相对路径解析\nexport function importAnalysis(): Plugin {\n  let serverContext: ServerContext\n  return {\n    name: 'm-vite:import-analysis',\n    configureServer(s) {\n      serverContext = s\n    },\n    async transform(code: string, id: string) {\n      if (!isRequestJs(id) || isInternalRequest(id)) {\n        return null\n      }\n      await init\n      const [imports] = await parse(code)\n      const ms = new MagicString(code)\n\n      const resolve = async (id: string, importer: string) => {\n        const resolved = await this.resolve(id, normalizePath(importer))\n        if (!resolved) {\n          return\n        }\n        const cleanedId = cleanUrl(resolved.id)\n        const mod = moduleGraph.getModuleById(cleanedId)\n        let resolvedId = `/${getShortName(resolved.id, serverContext.root)}`\n        if (mod && mod.lastHTMLTimestamp) {\n          resolvedId += '?t=' + mod.lastHTMLTimestamp\n        }\n        return resolvedId\n      }\n\n      const { moduleGraph } = serverContext\n      const curMod = moduleGraph.getModuleById(id)!\n      const importedModules = new Set<string>()\n\n      for (const importInfo of imports) {\n        const { s: modStart, e: modEnd, n: modSource } = importInfo\n        if (!modSource) continue\n        if (modSource.endsWith('.svg')) {\n          // 添加 ?import 标识，重写路径\n          const resolvedUrl = await resolve(modSource, id)\n          ms.overwrite(modStart, modEnd, `${resolvedUrl}?import`)\n          continue\n        }\n        if (BARE_IMPORT_RE.test(modSource)) {\n          const bundlePath = normalizePath(\n            path.join('/', PRE_BUNDLE_DIR, modSource + '.js')\n          )\n          importedModules.add(bundlePath)\n          // 将内容重写 改写后的bare import包路径\n          ms.overwrite(modStart, modEnd, bundlePath)\n        } else if (id.startsWith('.') || id.startsWith('/')) {\n          const resolveId = await resolve(modSource, id)\n          if (resolveId) {\n            importedModules.add(resolveId)\n            ms.overwrite(modStart, modEnd, resolveId)\n          }\n        }\n      }\n      if (!id.includes('node_modules')) {\n        // 业务代码注入热更新函数\n        ms.prepend(\n          `import { createHotContext as __vite__createHotContext } from \"${CLIENT_PUBLIC_PATH}\";\\n` +\n            `import.meta.hot = __vite__createHotContext(${JSON.stringify(\n              cleanUrl(curMod.url)\n            )});\\n`\n        )\n      }\n      // 将更改的模块，收集后更新\n      moduleGraph.updateModuleInfo(curMod, importedModules)\n      return {\n        code: ms.toString(),\n        map: ms.generateMap()\n      }\n    }\n  }\n}\n","import fs from 'fs-extra'\nimport path from 'path'\n\nimport { Plugin } from '../plugin'\nimport { ServerContext } from '../server'\nimport { normalizePath } from '../utils'\nimport resolve from 'resolve'\nimport { DEFAULT_EXTERSIONS } from '../../constant'\n\n// 引入文件路径转换为真实地址\nexport function resolvePlugin(): Plugin {\n  let serverContext: ServerContext\n  return {\n    name: 'm-vite:resolve',\n    configureServer(s) {\n      serverContext = s\n    },\n    async resolveId(id, importer) {\n      if (path.isAbsolute(id)) {\n        if (fs.pathExistsSync(id)) {\n          return {\n            id\n          }\n        }\n        id = path.join(serverContext.root, id)\n        if (fs.pathExistsSync(id)) {\n          return { id }\n        }\n      } else if (id.startsWith('.')) {\n        if (!importer) {\n          throw new Error(\"'importer' is undefined\")\n        }\n        const hasExtersions = path.extname(id).length > 1\n        let resolveId: string\n        // 有后缀\n        if (hasExtersions) {\n          resolveId = normalizePath(\n            resolve.sync(id, { basedir: path.dirname(importer) })\n          )\n          if (fs.pathExistsSync(resolveId)) {\n            return {\n              id: resolveId\n            }\n          }\n        } else {\n          for (const extname of DEFAULT_EXTERSIONS) {\n            try {\n              const newId = id + extname\n              const resolveId = normalizePath(\n                resolve.sync(newId, { basedir: path.dirname(importer) })\n              )\n              if (fs.pathExistsSync(resolveId)) {\n                return {\n                  id: resolveId\n                }\n              } else continue\n            } catch (e) {\n              continue\n            }\n          }\n        }\n      }\n      return null\n    }\n  }\n}\n","import { Plugin } from '../plugin'\nimport { assetsPlugin } from './assets'\nimport { clientInject } from './clientInject'\nimport { cssPlugin } from './css'\nimport { esBuildTrasnform } from './esbuild'\nimport { importAnalysis } from './importAnalysis'\nimport { resolvePlugin } from './resolve'\nexport function resolvePlugins(): Plugin[] {\n  return [\n    clientInject(),\n    resolvePlugin(),\n    esBuildTrasnform(),\n    importAnalysis(),\n    cssPlugin(),\n    assetsPlugin()\n  ]\n}\n","import path from 'path'\nimport fs from 'fs-extra'\n\nimport { ServerContext } from '../index'\nimport { NextHandleFunction } from 'connect';\n\nexport function indexHtmlMiddleware(serverContext: ServerContext): NextHandleFunction {\n  return async (req, res, next) => {\n    if (req.url === '/') {\n      const { root } = serverContext\n      const indexFilePath = path.join(root, 'index.html')\n      \n      if (await fs.pathExistsSync(indexFilePath)) {\n        const rawHtml = await fs.readFileSync(indexFilePath, 'utf-8')\n        let html = rawHtml\n        for(const plugin of serverContext.plugins){\n          if(plugin.transformIndexHtml){\n            html = await plugin.transformIndexHtml(html)\n          }\n        }\n        res.statusCode = 200\n        res.setHeader('Content-Type', 'text/html')\n        return res.end(html)\n      }\n    }\n    return next()\n  }\n}\n","import { NextHandleFunction } from 'connect'\nimport { ServerContext } from '../index'\nimport {\n  cleanUrl,\n  isImportRequest,\n  isRequestCss,\n  isRequestJs\n} from '../../utils'\n\nexport async function transformRequest(\n  url: string,\n  serverContext: ServerContext\n) {\n  const { pluginContainer, moduleGraph } = serverContext\n  url = cleanUrl(url)\n  let mod = await moduleGraph.getModuleByUrl(url)\n  // 返回缓存内容\n  if (mod && mod.transformResult) {\n    return mod.transformResult\n  }\n  const resolveResult = await pluginContainer.resolveId(url)\n  let transformCode\n  if (resolveResult?.id) {\n    let loadResult = await pluginContainer.load(resolveResult.id)\n    if (typeof loadResult === 'object' && loadResult !== null) {\n      loadResult = loadResult.code\n    }\n    mod = await moduleGraph.ensureEntryFormUrl(url)\n    if (loadResult) {\n      transformCode = await pluginContainer.transform(\n        loadResult as string,\n        resolveResult?.id\n      )\n    }\n    // 添加缓存\n    if (mod) {\n      mod.transformResult = transformCode\n    }\n    return transformCode\n  }\n}\n\nexport function transformMiddleware(\n  serverContext: ServerContext\n): NextHandleFunction {\n  return async (req, res, next) => {\n    if (req.method !== 'GET' || !req.url) {\n      return next()\n    }\n    const url = req.url\n    if (isRequestJs(url) || isRequestCss(url) || isImportRequest(url)) {\n      // 核心转换函数，依次调用resolve，load，trasnform\n      let result = await transformRequest(url, serverContext)\n      if (!result) {\n        return next()\n      }\n      if (result && result.code) {\n        result = result.code\n      }\n      res.statusCode = 200\n      res.setHeader('Content-Type', 'application/javascript')\n      return res.end(result)\n    }\n    next()\n  }\n}\n","import { NextHandleFunction } from 'connect'\nimport sirv from 'sirv'\nimport { isImportRequest } from '../../utils'\n\nexport function staticMiddleware(root: string): NextHandleFunction {\n  const serverFormRoot = sirv(root, { dev: true })\n  return async (req, res, next) => {\n    if (!req.url) {\n      return\n    }\n    if (isImportRequest(req.url)) {\n      return\n    }\n    serverFormRoot(req, res, next)\n  }\n}\n","import { PartialResolvedId, TransformResult } from 'rollup'\nimport { cleanUrl } from './utils'\n\nexport class ModuleNode {\n  // 资源访问url\n  url: string\n  // 资源绝对路径url\n  id: string | null = null\n  importers = new Set<ModuleNode>()\n  importedModules = new Set<ModuleNode>()\n  transformResult: TransformResult = null\n  lastHTMLTimestamp = 0\n  constructor(url: string) {\n    this.url = url\n  }\n}\n\nexport class ModuleGraph {\n  // 从url映射到 节点 的映射表\n  urlToModuleMap = new Map<string, ModuleNode>()\n  // 从id映射到 节点 的映射表\n  idToModuleMap = new Map<string, ModuleNode>()\n\n  constructor(private resolveId: (url) => Promise<PartialResolvedId | null>) {}\n\n  getModuleById(id: string): ModuleNode | undefined {\n    return this.idToModuleMap.get(id)\n  }\n  async getModuleByUrl(rawUrl: string): Promise<ModuleNode | undefined> {\n    const { url } = await this._resolve(rawUrl)\n    return this.urlToModuleMap.get(url)\n  }\n  // 注册入口\n  async ensureEntryFormUrl(rawUrl: string): Promise<ModuleNode> {\n    const { url, resolvedId } = await this._resolve(rawUrl)\n    if (this.urlToModuleMap.has(url)) {\n      return this.urlToModuleMap.get(url) as ModuleNode\n    }\n    const m = new ModuleNode(url)\n    m.id = resolvedId\n    this.urlToModuleMap.set(url, m)\n    this.idToModuleMap.set(resolvedId, m)\n    return m\n  }\n  async updateModuleInfo(\n    mod: ModuleNode,\n    importedModules: Set<string | ModuleNode>\n  ) {\n    const prevImportedModules = mod.importedModules\n    for (let curModule of importedModules) {\n      const dep =\n        typeof curModule === 'string'\n          ? await this.ensureEntryFormUrl(cleanUrl(curModule))\n          : curModule\n      if (dep) {\n        // 当前模块添加修改后的 引入模块路径\n        mod.importedModules.add(dep)\n        // 添加更正后的 引入模块的被引入路径\n        dep.importers.add(mod)\n      }\n    }\n    // 过期的路径删除\n    for (const prevModule of prevImportedModules) {\n      if (!importedModules.has(prevModule.url)) {\n        prevModule.importers.delete(mod)\n      }\n    }\n  }\n  // 过期模块清除\n  invaliDateModule(file: string) {\n    const mod = this.idToModuleMap.get(file)\n    if (mod) {\n      mod.lastHTMLTimestamp = Date.now()\n      mod.transformResult = null\n      mod.importers.forEach((item) => {\n        this.invaliDateModule(item.id!)\n      })\n    }\n  }\n  private async _resolve(\n    url: string\n  ): Promise<{ url: string; resolvedId: string }> {\n    const resolved = await this.resolveId(url)\n    const resolvedId = resolved?.id || url\n    return {\n      url,\n      resolvedId\n    }\n  }\n}\n","import { red } from 'picocolors'\nimport { WebSocket, WebSocketServer } from 'ws'\nimport connect from 'connect'\n\nimport { HMR_PORT } from '../constant'\n\nexport function createWebSocketServer(server: connect.Server): {\n  send: (msg: string) => void\n  close: () => void\n} {\n  let wss: WebSocketServer\n  wss = new WebSocketServer({ port: HMR_PORT })\n\n  wss.on('connection', (socket) => {\n    socket.send(JSON.stringify({ type: 'connected' }))\n  })\n\n  wss.on('error', (e: Error & { code: string }) => {\n    if (e.code !== 'EADDRINUSE') {\n      console.error(red(`WebSocket server error:\\n${e.stack || e.message}`))\n    }\n  })\n\n  return {\n    send(payload: Object) {\n      const stringified = JSON.stringify(payload)\n      wss.clients.forEach((client) => {\n        if (client.readyState === WebSocket.OPEN) {\n          client.send(stringified)\n        }\n      })\n    },\n    close() {\n      wss.close()\n    }\n  }\n}\n","import { blue, green } from 'picocolors'\nimport { ServerContext } from './server'\nimport { getShortName } from './utils'\n\nexport function bindingHMREvents(serverContext: ServerContext) {\n  const { ws, watcher, root } = serverContext\n  watcher.on('change', async (file) => {\n    const { moduleGraph } = serverContext\n    moduleGraph.invaliDateModule(file)\n    // 长连接发送更新内容，为当前模块为边界的更新\n    ws.send({\n      type: 'update',\n      updates: [\n        {\n          type: 'js-update',\n          timestamp: Date.now(),\n          path: '/' + getShortName(file, root),\n          acceptedPath: '/' + getShortName(file, root)\n        }\n      ]\n    })\n  })\n}\n"],"mappings":"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","names":["green","path","build","path","path","path","path","root","build","root","path","root","path","path","fs","path","fs","fs","fs","fs","path","fs","path","init","parse","path","init","parse","resolve","id","path","fs","path","resolve","path","fs","resolve","resolveId","path","fs","root","root","root","root","green"]}