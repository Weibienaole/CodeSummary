/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./index.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./index.js":
/*!******************!*\
  !*** ./index.js ***!
  \******************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("const RegModules = __webpack_require__(/*! ./src/regModule */ \"./src/regModule.js\")\r\nconst DevTools = __webpack_require__(/*! ./src/devTools */ \"./src/devTools.js\")\r\n// const {ReactComponents} = require('./src/reactComponets')\r\n\r\n// html引入 import 方式替换require处理\r\n// import DevTools from './src/devTools'\r\n// ...\r\n\r\nlet devtools = new DevTools()\r\nlet regModules = new RegModules()\r\n\r\n// console.log(ReactComponents, 'ReactComponents');\r\n\r\n// html引入\r\n// export default { devtools }\r\nmodule.exports = { devtools, regModules }\r\n// export default \n\n//# sourceURL=webpack:///./index.js?");

/***/ }),

/***/ "./src/devTools.js":
/*!*************************!*\
  !*** ./src/devTools.js ***!
  \*************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("class DevTools {\r\n  // 算法类\r\n  // 根据数组生成树结构\r\n  /*\r\n  const comments1 = [\r\n    { id: 1, parentId: null },\r\n    { id: 2, parentId: 1 },\r\n    { id: 3, parentId: 1 },\r\n    { id: 4, parentId: 2 },\r\n    { id: 5, parentId: 4 }\r\n  ];\r\n  */\r\n  generateTree(items, parentId = null, selectVal = 'parentId') {\r\n    return items.filter(item => item[selectVal] === parentId).map(i => { return { ...i, children: this.generateTree(items, i.id, selectVal) } })\r\n  }\r\n\r\n  // 全等判断 ---> 在两个变量之间进行深度比较以确定它们是否全等。\r\n  // allEquals({ a: [2, { e: 3 }], b: [4], c: 'foo' }, { a: [2, { e: 3 }], b: [4], c: 'foo' }); // true\r\n  allEquals(a, b) {\r\n    if (a === b) return true;\r\n    if (a instanceof Date && b instanceof Date) return a.getTime() === b.getTime();\r\n    if (!a || !b || (typeof a !== 'object' && typeof b !== 'object')) return a === b;\r\n    if (a.prototype !== b.prototype) return false;\r\n    let keys = Object.keys(a);\r\n    if (keys.length !== Object.keys(b).length) return false;\r\n    return keys.every(function (k) { return allEquals(a[k], b[k]) });\r\n  };\r\n\r\n\r\n  // time\r\n\r\n  // 返回当前24小时制时间的字符串\r\n  // getColonTimeFromDate3(new Date());\r\n  getColonTimeFromDate(date) {\r\n    return date.toTimeString().slice(0, 8);\r\n  }\r\n\r\n  // 返回日期间的天数\r\n  // getDaysDiffBetweenDates4(new Date('2019-01-01'), new Date('2019-10-14'));\r\n  getDaysDiffBetweenDates(dateInitial, dateFinal) {\r\n    return (dateFinal - dateInitial) / (1000 * 3600 * 24);\r\n  }\r\n\r\n  // 时间格式转化年 -- 接受 ms 级的时间戳\r\n  changeTimeYear(time) {\r\n    time = parseInt(time) //将传入的时间戳的值转化为Number\r\n    time = new Date(time);\r\n    const year = time.getFullYear()\r\n    const month = time.getMonth() + 1\r\n    const date = time.getDate()\r\n    return (\r\n      year +\r\n      '-' +\r\n      (month >= 10 ? month : '0' + month) +\r\n      '-' +\r\n      (date >= 10 ? date : '0' + date) +\r\n      ' '\r\n    )\r\n  }\r\n\r\n  // 格式化 天:时:分:秒 参数 - 剩余时间戳 - 单位为 S\r\n  formateSeconds(surPlusTime) {\r\n    let secondTime = parseInt(surPlusTime) //将传入的秒的值转化为Number\r\n    let min = 0 // 初始化分\r\n    let h = 0 // 初始化小时\r\n    let d = 0 // 初始化天\r\n    let result = ''\r\n    if (secondTime > 60) {\r\n      //如果秒数大于60，将秒数转换成整数\r\n      min = parseInt(secondTime / 60) //获取分钟，除以60取整数，得到整数分钟\r\n      secondTime = parseInt(secondTime % 60) //获取秒数，秒数取佘，得到整数秒数\r\n      if (min > 60) {\r\n        //如果分钟大于60，将分钟转换成小时\r\n        h = parseInt(min / 60) //获取小时，获取分钟除以60，得到整数小时\r\n        min = parseInt(min % 60) //获取小时后取佘的分，获取分钟除以60取佘的分\r\n        if (h > 23) {\r\n          d = parseInt(h / 24) // 获取天，获取分钟除以24，得到整数天\r\n          h = parseInt(h % 24) // 获取天后取佘的小时，获取时除24取佘的时\r\n        }\r\n      }\r\n    }\r\n    result = `${d.toString().padStart(2, '0')}:${h\r\n      .toString()\r\n      .padStart(2, '0')}:${min\r\n        .toString()\r\n        .padStart(2, '0')}:${secondTime.toString().padStart(2, '0')}`\r\n    return result\r\n    // return 00:00:00:00\r\n  }\r\n  // 时间戳转化为当前时间 \r\n  formatNowTime(time) {\r\n    function add0(m) { return m < 10 ? '0' + m : m }\r\n    time = parseInt(time) //将传入的时间戳的值转化为Number\r\n    time = new Date(time);\r\n    var y = time.getFullYear();\r\n    var m = time.getMonth() + 1;\r\n    var d = time.getDate();\r\n    var h = time.getHours();\r\n    var mm = time.getMinutes();\r\n    var s = time.getSeconds();\r\n    return y + '-' + add0(m) + '-' + add0(d) + ' ' + add0(h) + ':' + add0(mm) + ':' + add0(s);\r\n  }\r\n\r\n\r\n  // browser\r\n\r\n  // 检查页面底部是否可见\r\n  bottomVisible() {\r\n    return (document.documentElement.clientHeight + window.scrollY >=\r\n      (document.documentElement.scrollHeight || document.documentElement.clientHeight))\r\n  }\r\n\r\n  // 检查当前标签页是否活动\r\n  isBrowserTabFocused() {\r\n    return !document.hidden;\r\n  }\r\n\r\n  // 平滑滚动至顶部 --> 该代码段可用于平滑滚动到当前页面的顶部。\r\n  scrollToTop() {\r\n    const c = document.documentElement.scrollTop || document.body.scrollTop;\r\n    if (c > 0) {\r\n      window.requestAnimationFrame(scrollToTop);\r\n      window.scrollTo(0, c - c / 8);\r\n    }\r\n  };\r\n\r\n  // 滚动到指定元素区域 --> 该代码段可将指定元素平滑滚动到浏览器窗口的可见区域。\r\n  // smoothScroll11('#fooBar');\r\n  smoothScroll(el) {\r\n    document.querySelector(el).scrollIntoView({\r\n      behavior: 'smooth'\r\n    });\r\n  }\r\n\r\n  // 取当前页面的滚动位置\r\n  //  getScrollPosition(); // {x: 0, y: 200}\r\n  // el 为选定 dom 默认 window\r\n  // 返回 {x: , y: }\r\n  getScrollPosition(el = window) {\r\n    return {\r\n      x: el.pageXOffset !== undefined ? el.pageXOffset : el.scrollLeft,\r\n      y: el.pageYOffset !== undefined ? el.pageYOffset : el.scrollTop\r\n    }\r\n  }\r\n\r\n  // 功能描述：一些业务场景，如弹框出现时，需要禁止页面滚动，这是兼容安卓和 iOS 禁止页面滚动的解决方案\r\n  // 固定滚动条  接受一个y轴 Number\r\n  preventScroll(scrollNum) {\r\n    // 存储当前滚动位置\r\n    scrollNum = window.scrollY;\r\n\r\n    // 将可滚动区域固定定位，可滚动区域高度为 0 后就不能滚动了\r\n    document.body.style[\"overflow-y\"] = \"hidden\";\r\n    document.body.style.position = \"fixed\";\r\n    document.body.style.width = \"100%\";\r\n    document.body.style.top = -scrollNum + \"px\";\r\n    // document.body.style['overscroll-behavior'] = 'none'\r\n  }\r\n  // 恢复滚动条  接受一个y轴 Number  如果配合 preventScroll 方法使用需要现将 固定前的滚动条高度记录，再恢复时赋值给 recoverScroll 方法\r\n  recoverScroll(scrollNum) {\r\n    document.body.style[\"overflow-y\"] = \"auto\";\r\n    document.body.style.position = \"static\";\r\n    // document.querySelector('body').style['overscroll-behavior'] = 'none'\r\n\r\n    window.scrollTo(0, scrollNum);\r\n  }\r\n\r\n  // 检查指定的元素在视口中是否可见\r\n\r\n  // elementIsVisibleInViewport(el); // 需要左右可见\r\n  // elementIsVisibleInViewport(el, true); // 需要全屏(上下左右)可以见\r\n\r\n  elementIsVisibleInViewport(el, partiallyVisible = false) {\r\n    const { top, left, bottom, right } = el.getBoundingClientRect();\r\n    const { innerHeight, innerWidth } = window;\r\n    return partiallyVisible\r\n      ? ((top > 0 && top < innerHeight) || (bottom > 0 && bottom < innerHeight)) &&\r\n      ((left > 0 && left < innerWidth) || (right > 0 && right < innerWidth))\r\n      : top >= 0 && left >= 0 && bottom <= innerHeight && right <= innerWidth;\r\n  }\r\n\r\n  // 某个元素开启全屏 接受一个 dom 作为参数\r\n  launchFullscreen(el) {\r\n    if (el.requestFullscreen) {\r\n      el.requestFullscreen()\r\n    } else if (el.mozRequestFullScreen) {\r\n      el.mozRequestFullScreen()\r\n    } else if (el.msRequestFullscreen) {\r\n      el.msRequestFullscreen()\r\n    } else if (el.webkitRequestFullscreen) {\r\n      el.webkitRequestFullScreen()\r\n    }\r\n  }\r\n\r\n  // 关闭全屏模式\r\n  exitFullscreen() {\r\n    if (document.exitFullscreen) {\r\n      document.exitFullscreen()\r\n    } else if (document.msExitFullscreen) {\r\n      document.msExitFullscreen()\r\n    } else if (document.mozCancelFullScreen) {\r\n      document.mozCancelFullScreen()\r\n    } else if (document.webkitExitFullscreen) {\r\n      document.webkitExitFullscreen()\r\n    }\r\n  }\r\n\r\n\r\n  // js\r\n\r\n  // 将一组表单元素转化为对象\r\n  /*\r\n    example\r\n    formToObject(document.querySelector('#form')); \r\n        { email: 'test@email.com', name: 'Test Name' }\r\n  */\r\n  formToObject(form) {\r\n    return Array.from(new FormData(form)).reduce(\r\n      (acc, [key, value]) => ({\r\n        ...acc,\r\n        [key]: value\r\n      }),\r\n      {}\r\n    );\r\n  }\r\n\r\n  // 将字符串复制到剪贴板\r\n  /*\r\n    example: \r\n    copyToClipboard('Lorem ipsum'); \r\n      'Lorem ipsum' copied to clipboard\r\n  */\r\n  copyToClipboard(str) {\r\n    const el = document.createElement('textarea');\r\n    el.value = str;\r\n    el.setAttribute('readonly', '');\r\n    el.style.position = 'absolute';\r\n    el.style.left = '-9999px';\r\n    document.body.appendChild(el);\r\n    const selected =\r\n      document.getSelection().rangeCount > 0 ? document.getSelection().getRangeAt(0) : false;\r\n    el.select();\r\n    document.execCommand('copy');\r\n    document.body.removeChild(el);\r\n    if (selected) {\r\n      document.getSelection().removeAllRanges();\r\n      document.getSelection().addRange(selected);\r\n    }\r\n  }\r\n\r\n  // 金钱格式化，三位加逗号\r\n  formatMoney(val) {\r\n    return val.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")\r\n  }\r\n  // B转换到KB,MB,GB并保留两位小数  参数接受一个 b 字节 为单位的值\r\n  formatFileSize(fileSize) {\r\n    let temp;\r\n    if (fileSize < 1024) {\r\n      return fileSize + 'B';\r\n    } else if (fileSize < (1024 * 1024)) {\r\n      temp = fileSize / 1024;\r\n      temp = temp.toFixed(2);\r\n      return temp + 'KB';\r\n    } else if (fileSize < (1024 * 1024 * 1024)) {\r\n      temp = fileSize / (1024 * 1024);\r\n      temp = temp.toFixed(2);\r\n      return temp + 'MB';\r\n    } else {\r\n      temp = fileSize / (1024 * 1024 * 1024);\r\n      temp = temp.toFixed(2);\r\n      return temp + 'GB';\r\n    }\r\n  }\r\n\r\n  // 去除空格\r\n  // str 待处理字符串\r\n  // type 去除空格类型 1-所有空格  2-前后空格  3-前空格 4-后空格 默认为1\r\n  strTrim(str, type = 1) {\r\n    if (type && type !== 1 && type !== 2 && type !== 3 && type !== 4) return;\r\n    switch (type) {\r\n      case 1:\r\n        return str.replace(/\\s/g, \"\");\r\n      case 2:\r\n        return str.replace(/(^\\s)|(\\s*$)/g, \"\");\r\n      case 3:\r\n        return str.replace(/(^\\s)/g, \"\");\r\n      case 4:\r\n        return str.replace(/(\\s$)/g, \"\");\r\n      default:\r\n        return str;\r\n    }\r\n  }\r\n\r\n  // 检测移动/PC设备\r\n  detectDeviceType() {\r\n    return /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)\r\n      ? 'Mobile'\r\n      : 'Desktop';\r\n  }\r\n\r\n  // 当前设备是否是 android\r\n  isAndroidPlatform() {\r\n    const u = navigator.userAgent\r\n    const isAndroid = u.indexOf('Android') > -1 || u.indexOf('Adr') > -1\r\n    return isAndroid\r\n  }\r\n\r\n  // 获取地址栏参数\r\n  getUrlData(url) {\r\n    if (url.slice(url.length - 2, url.length) === '#/') url = url.slice(0, url.length - 2)\r\n    let o = {}\r\n    let params = url.split('?')[1]\r\n    if (!params) return {}\r\n    params.split('&').map(item => {\r\n      let r = item.split('=')\r\n      o[item.split('=')[0]] = r[1]\r\n    })\r\n    return o\r\n  }\r\n\r\n  // 上传文件\r\n  uploadImage({ url, file }) {\r\n    let fromData = new FormData();\r\n    fromData.append('imgFile', file);\r\n    return new Promise((resolve, reject) => {\r\n      axios({\r\n        method: 'post',\r\n        url: url,\r\n        data: fromData,\r\n        headers: {\r\n          'Content-Type': 'multipart/form-data'\r\n        }\r\n      }).then(res => {\r\n        resolve(res.data);\r\n      }).catch(e => {\r\n        reject(e)\r\n      })\r\n    })\r\n  }\r\n\r\n  // rem*16px(以蓝湖rem设置为标准 设置16px的rem就是 *8)\r\n  setDomRem(num = 8) {\r\n    (function (designWidth, maxWidth) {\r\n      var doc = document,\r\n        win = window;\r\n      var docEl = doc.documentElement;\r\n      var tid;\r\n      var rootItem, rootStyle;\r\n\r\n      function refreshRem() {\r\n        var width = docEl.getBoundingClientRect().width;\r\n        if (!maxWidth) {\r\n          maxWidth = 540;\r\n        }\r\n        ;\r\n        if (width > maxWidth) {\r\n          width = maxWidth;\r\n        }\r\n        //与淘宝做法不同，直接采用简单的rem换算方法1rem=100px\r\n        var rem = width * +num / designWidth;\r\n        //兼容UC开始\r\n        rootStyle = \"html{font-size:\" + rem + 'px !important}';\r\n        rootItem = document.getElementById('rootsize') || document.createElement(\"style\");\r\n        if (!document.getElementById('rootsize')) {\r\n          document.getElementsByTagName(\"head\")[0].appendChild(rootItem);\r\n          rootItem.id = 'rootsize';\r\n        }\r\n        if (rootItem.styleSheet) {\r\n          rootItem.styleSheet.disabled || (rootItem.styleSheet.cssText = rootStyle)\r\n        } else {\r\n          try {\r\n            rootItem.innerHTML = rootStyle\r\n          } catch (f) {\r\n            rootItem.innerText = rootStyle\r\n          }\r\n        }\r\n        //兼容UC结束\r\n        docEl.style.fontSize = rem + \"px\";\r\n      };\r\n      refreshRem();\r\n\r\n      win.addEventListener(\"resize\", function () {\r\n        clearTimeout(tid); //防止执行两次\r\n        tid = setTimeout(refreshRem, 300);\r\n      }, false);\r\n\r\n      win.addEventListener(\"pageshow\", function (e) {\r\n        if (e.persisted) { // 浏览器后退的时候重新计算\r\n          clearTimeout(tid);\r\n          tid = setTimeout(refreshRem, 300);\r\n        }\r\n      }, false);\r\n\r\n      if (doc.readyState === \"complete\") {\r\n        doc.body.style.fontSize = \"16px\";\r\n      } else {\r\n        doc.addEventListener(\"DOMContentLoaded\", function (e) {\r\n          doc.body.style.fontSize = \"16px\";\r\n        }, false);\r\n      }\r\n    })(375, 750);\r\n  }\r\n\r\n  // 生产环境不显示 console.log\r\n  rewirteLog() {\r\n    console.log = (function (log) {\r\n      // webpack.config.js 中必须设置好正确的 mode\r\n      return  true ? log : undefined\r\n    }(console.log))\r\n  }\r\n\r\n  // 增强版typeOf typeOf 关键字对于null，date 都会认为是Object，不准确\r\n  typeOf(data) {\r\n    let res = Object.prototype.toString.call(data).split(' ')[1]\r\n    return res.slice(0, res.length - 1)\r\n  }\r\n\r\n  // 深拷贝\r\n  deepClone(target) {\r\n    let result;\r\n    if (typeof target === 'object') {\r\n      if (Array.isArray(target)) {\r\n        result = [];\r\n        for (let i in target) {\r\n          result.push(deepClone(target[i]))\r\n        }\r\n      } else if (target === null) {\r\n        result = null;\r\n      } else if (target.constructor === RegExp) {\r\n        result = target;\r\n      } else {\r\n        result = {};\r\n        for (let i in target) {\r\n          result[i] = deepClone(target[i]);\r\n        }\r\n      }\r\n    } else {\r\n      result = target;\r\n    }\r\n    return result;\r\n  }\r\n\r\n  // 启用图片懒加载\r\n  // 需要设置html中的img src为空，data-src属性为目标路径\r\n  // 必须等待加载目标的 data-src 属性赋值完毕，再执行此方法\r\n  lazyImage(className = null) {\r\n    // 懒记载图片列表，将伪数组转为数组，以便可以使用数组的api      \r\n    let imageElements = Array.prototype.slice.call(className ? document.querySelectorAll(className) : document.getElementsByTagName('img')), _throttleFn\r\n    // 只针对具有参数的值进行处理\r\n    imageElements = imageElements.filter(item => item.dataset.src)\r\n    init()\r\n    function inViewShow() {\r\n      let len = imageElements.length\r\n      for (let i = 0; i < len; i++) {\r\n        let imageElement = imageElements[i]\r\n        const rect = imageElement.getBoundingClientRect()\r\n        // 出现在视野的时候加载图片        \r\n        if (rect.top < document.documentElement.clientHeight) {\r\n          imageElement.src = imageElement.dataset.src\r\n          // 移除掉已经显示的          \r\n          imageElements.splice(i, 1)\r\n          len--\r\n          i--\r\n          if (imageElements.length === 0) {\r\n            // 如果全部都加载完 则去掉滚动事件监听            \r\n            document.removeEventListener('scroll', _throttleFn)\r\n          }\r\n        }\r\n      }\r\n    }\r\n    // 节流\r\n    function throttle(fn, delay = 100, mustRun = 30) {\r\n      let t_start = null\r\n      let timer = null\r\n      let context = this\r\n      return function () {\r\n        let t_current = +(new Date())\r\n        let args = Array.prototype.slice.call(arguments)\r\n        clearTimeout(timer)\r\n        if (!t_start) {\r\n          t_start = t_current\r\n        }\r\n        if (t_current - t_start > mustRun) {\r\n          fn.apply(context, args)\r\n          t_start = t_current\r\n        } else {\r\n          timer = setTimeout(() => {\r\n            fn.apply(context, args)\r\n          }, delay)\r\n        }\r\n      }\r\n    }\r\n    function init() {\r\n      // 通过IntersectionObserver api判断图片是否出现在可视区域内，不需要监听Scroll来判断      \r\n      if (\"IntersectionObserver\" in window) {\r\n        let lazyImageObserver = new IntersectionObserver((entries, observer) => {\r\n          entries.forEach((entry, index) => {\r\n            // 如果元素可见            \r\n            if (entry.isIntersecting) {\r\n              let lazyImage = entry.target\r\n              lazyImage.src = lazyImage.dataset.src\r\n              lazyImage.classList.remove(\"lazy-image\")\r\n              lazyImageObserver.unobserve(lazyImage)\r\n              imageElements.splice(index, 1)\r\n            }\r\n          })\r\n        })\r\n        imageElements.forEach(function (lazyImage) {\r\n          lazyImageObserver.observe(lazyImage);\r\n        })\r\n      } else {\r\n        inViewShow()\r\n        _throttleFn = throttle(inViewShow)\r\n        document.addEventListener('scroll', _throttleFn.bind(this))\r\n      }\r\n    }\r\n  }\r\n\r\n  // 防抖 执行函数,间隔时间,是否立即执行一次\r\n  debounce(func, wait, immediate = true) {\r\n    var timeout, result;\r\n    var debounced = function () {\r\n      var context = this;\r\n      var args = arguments;\r\n      if (timeout) clearTimeout(timeout);\r\n      if (immediate) {\r\n        // 如果已经执行过，不再执行\r\n        var callNow = !timeout;\r\n        timeout = setTimeout(function () {\r\n          timeout = null;\r\n        }, wait)\r\n        if (callNow) result = func.apply(context, args)\r\n      } else {\r\n        timeout = setTimeout(function () {\r\n          func.apply(context, args)\r\n        }, wait);\r\n      }\r\n      return result;\r\n    };\r\n    debounced.cancel = function () {\r\n      clearTimeout(timeout);\r\n      timeout = null;\r\n    };\r\n    return debounced;\r\n  }\r\n\r\n  // 节流 执行函数,间隔时间,设置{leading: 调用后是否立即执行一次,trailing: 结束后是否还要执行一次} 默认都为true，但都不能为false\r\n  throttle(func, wait, options) {\r\n    var timeout, context, args\r\n    // 上一次的时间点\r\n    var previous = 0\r\n    if (!options) options = {}\r\n\r\n    var later = function () {\r\n      previous = options.leading === false ? 0 : new Date().getTime()\r\n      timeout = null\r\n      func.apply(context, args)\r\n      if (!timeout) context = args = null\r\n    }\r\n\r\n    var throttled = function () {\r\n      // 拿到当前时间的时间戳\r\n      var now = new Date().getTime()\r\n      // 如果 上一次时间为0 且 不设置立即执行，将当前时间赋值给上次时间\r\n      if (!previous && options.leading === false) previous = now\r\n      // 当前空档时间 设定等待值 - (当前 - 上一次时间)\r\n      var remaining = wait - (now - previous)\r\n      context = this\r\n      args = arguments\r\n      // console.log(arguments, 'arguments');\r\n      if (remaining <= 0 || remaining > wait) {\r\n        if (timeout) {\r\n          clearTimeout(timeout)\r\n          timeout = null\r\n        }\r\n        previous = now\r\n        func.apply(context, args)\r\n        if (!timeout) context = args = null\r\n      } else if (!timeout && options.trailing !== false) {\r\n        timeout = setTimeout(later, remaining)\r\n      }\r\n    }\r\n\r\n    throttled.cancel = function () {\r\n      clearTimeout(timeout)\r\n      previous = 0\r\n      timeout = null\r\n    }\r\n    return throttled\r\n  }\r\n\r\n  // 无限滚动\r\n  /**\r\n   * \r\n   * @param {目标节点} dom \r\n   * @param {Function} cb \r\n   * @param {可选：关闭监听(只有在监听滚动条时才会有效，否则无效，可忽略(针对低版本浏览器启用监听滚动条方式进行处理))} devtools.infinityScrollIng.closeMonitor()\r\n   * \r\n   * \r\n   * example:\r\n   * devtools.infinityScrollIng(document.querySelector('.bottomScrollBar'), ()=>{\r\n   * // 回调第一行必须设置 infinityScrollIng 的bol 属性为 false，意味着已经进程已经开始，必须等待结束(失败或者成功)才可以重新为true，才可以进行下一次的回调触发\r\n   * devtools.infinityScrollIng.open = false\r\n   * //  ...some code\r\n   * devtools.infinityScrollIng.open = true // done\r\n   * })\r\n   */\r\n  infinityScrolling(dom, cb) {\r\n    this.infinityScrolling.bol = true\r\n    let throttleFn\r\n    //  需要一个外界bol判断是否加载完毕 不完毕不再次触发\r\n    if ('IntersectionObserver' in window) {\r\n      let intersectionOb = new IntersectionObserver(entry => {\r\n        if (!this.infinityScrolling.bol) return\r\n        // 1 - 可视范围内 0 - 不在可视范围内\r\n        if (entry[0].intersectionRatio) cb()\r\n      })\r\n      // 对 dom 启用监听\r\n      intersectionOb.observe(dom)\r\n    } else {\r\n      // 启用节流 100ms\r\n      throttleFn = devtools.throttle(monitorScroll, 100)\r\n      // 开启监听\r\n      document.addEventListener('scroll', throttleFn)\r\n    }\r\n    // 关闭监听 scroll监听时\r\n    this.infinityScrolling.closeMonitor = function () {\r\n      if ('IntersectionObserver' in window) return\r\n      // 关闭节流\r\n      throttleFn.cancel()\r\n      // 取消监听\r\n      document.removeEventListener('scroll', throttleFn)\r\n    }\r\n    // 监听滚动条要做的事情\r\n    function monitorScroll() {\r\n      if (!this.infinityScrolling.bol) return\r\n      // 检查指定的元素在视口中是否可见\r\n      if (devtools.elementIsVisibleInViewport(dom, true)) cb()\r\n    }\r\n  }\r\n\r\n\r\n  // html\r\n\r\n  // 从字符串中删除HTML / XML标签。\r\n  // deleteHTMLTags('<p><em>lorem</em> <strong class=\"asasasas\">ipsum</strong></p>'\r\n  deleteHTMLTags(str) {\r\n    return str.replace(/<[^>]*>/g, '')\r\n  }\r\n\r\n\r\n  // css\r\n\r\n  // 返回指定元素的生效样式\r\n  // getDomStyle(document.querySelector('p'), 'font-size')\r\n  getDomStyle(el, ruleName) {\r\n    return getComputedStyle(el)[ruleName];\r\n  }\r\n\r\n\r\n  // app&js\r\n  // JSBriged 交互处理方式 ios/android 通用\r\n  /*\r\n    appMethod(name, data).then(res=>{\r\n      // 回调返回数据\r\n    })\r\n  */\r\n  appMethod(name, data = null) {\r\n    /**\r\n     * name: 事件名\r\n     * data: 参数 - 仅有调app事件持有\r\n     */\r\n    return new Promise(function (reslove, reject) {\r\n      if (!window.setupWebViewJavascriptBridge) return reject('请先将 JSBriged.js 引入！')\r\n      window.setupWebViewJavascriptBridge(function (bridge) {\r\n        bridge.callHandler(name, data, function (result) {\r\n          reslove(result)\r\n        })\r\n      })\r\n    })\r\n  }\r\n}\r\n\r\nmodule.exports = DevTools\n\n//# sourceURL=webpack:///./src/devTools.js?");

/***/ }),

/***/ "./src/regModule.js":
/*!**************************!*\
  !*** ./src/regModule.js ***!
  \**************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("class RegModules {\r\n  // 身份证\r\n  isIdCard(idCard) {\r\n    if (typeof idCard === 'number') idCard = parseFloat(idCard) || String(idCard)\r\n    idCard = idCard.trim()\r\n    function validateIdCard(idCard) {\r\n      var vcity = {\r\n        11: '北京',\r\n        12: '天津',\r\n        13: '河北',\r\n        14: '山西',\r\n        15: '内蒙古',\r\n        21: '辽宁',\r\n        22: '吉林',\r\n        23: '黑龙江',\r\n        31: '上海',\r\n        32: '江苏',\r\n        33: '浙江',\r\n        34: '安徽',\r\n        35: '福建',\r\n        36: '江西',\r\n        37: '山东',\r\n        41: '河南',\r\n        42: '湖北',\r\n        43: '湖南',\r\n        44: '广东',\r\n        45: '广西',\r\n        46: '海南',\r\n        50: '重庆',\r\n        51: '四川',\r\n        52: '贵州',\r\n        53: '云南',\r\n        54: '西藏',\r\n        61: '陕西',\r\n        62: '甘肃',\r\n        63: '青海',\r\n        64: '宁夏',\r\n        65: '新疆',\r\n        71: '台湾',\r\n        81: '香港',\r\n        82: '澳门',\r\n        91: '国外',\r\n      }\r\n      //是否为空\r\n      if (idCard === '') {\r\n        return false\r\n      }\r\n      //校验长度，类型\r\n      if (isCardNo(idCard) === false) {\r\n        return false\r\n      }\r\n      //检查省份\r\n      if (checkProvince(idCard, vcity) === false) {\r\n        return false\r\n      }\r\n      //校验生日\r\n      if (checkBirthday(idCard) === false) {\r\n        return false\r\n      }\r\n      //检验位的检测\r\n      if (checkParity(idCard) === false) {\r\n        return false\r\n      }\r\n      return true\r\n    }\r\n\r\n    // 检查号码是否符合规范，包括长度，类型\r\n    function isCardNo(card) {\r\n      //身份证号码为15位或者18位，15位时全为数字，18位前17位为数字，最后一位是校验位，可能为数字或字符X\r\n      var reg = /(^\\d{15}$)|(^\\d{17}(\\d|X|x)$)/\r\n      if (reg.test(card) === false) {\r\n        return false\r\n      }\r\n      return true\r\n    }\r\n\r\n    // 取身份证前两位,校验省份\r\n    function checkProvince(card, vcity) {\r\n      var province = card.substr(0, 2)\r\n      if (vcity[province] == undefined) {\r\n        return false\r\n      }\r\n      return true\r\n    }\r\n\r\n    // 检查生日是否正确\r\n    function checkBirthday(card) {\r\n      var len = card.length\r\n      //身份证15位时，次序为省（3位）市（3位）年（2位）月（2位）日（2位）校验位（3位），皆为数字\r\n      if (len == '15') {\r\n        var re_fifteen = /^(\\d{6})(\\d{2})(\\d{2})(\\d{2})(\\d{3})$/\r\n        var arr_data = card.match(re_fifteen)\r\n        var year = arr_data[2]\r\n        var month = arr_data[3]\r\n        var day = arr_data[4]\r\n        var birthday = new Date('19' + year + '/' + month + '/' + day)\r\n        return verifyBirthday('19' + year, month, day, birthday)\r\n      }\r\n      //身份证18位时，次序为省（3位）市（3位）年（4位）月（2位）日（2位）校验位（4位），校验位末尾可能为X\r\n      if (len == '18') {\r\n        var re_eighteen = /^(\\d{6})(\\d{4})(\\d{2})(\\d{2})(\\d{3})([0-9]|X|x)$/\r\n        var arr_data = card.match(re_eighteen)\r\n        var year = arr_data[2]\r\n        var month = arr_data[3]\r\n        var day = arr_data[4]\r\n        var birthday = new Date(year + '/' + month + '/' + day)\r\n        return verifyBirthday(year, month, day, birthday)\r\n      }\r\n      return false\r\n    }\r\n\r\n    // 校验日期\r\n    function verifyBirthday(year, month, day, birthday) {\r\n      var now = new Date()\r\n      var now_year = now.getFullYear()\r\n      //年月日是否合理\r\n      if (\r\n        birthday.getFullYear() == year &&\r\n        birthday.getMonth() + 1 == month &&\r\n        birthday.getDate() == day\r\n      ) {\r\n        //判断年份的范围（0岁到100岁之间)\r\n        var time = now_year - year\r\n        if (time >= 0 && time <= 100) {\r\n          return true\r\n        }\r\n        return false\r\n      }\r\n      return false\r\n    }\r\n    // 校验位的检测\r\n    function checkParity(card) {\r\n      //15位转18位\r\n      card = changeFivteenToEighteen(card)\r\n      var len = card.length\r\n      if (len == '18') {\r\n        var arrInt = new Array(\r\n          7,\r\n          9,\r\n          10,\r\n          5,\r\n          8,\r\n          4,\r\n          2,\r\n          1,\r\n          6,\r\n          3,\r\n          7,\r\n          9,\r\n          10,\r\n          5,\r\n          8,\r\n          4,\r\n          2\r\n        )\r\n        var arrCh = new Array(\r\n          '1',\r\n          '0',\r\n          'X',\r\n          '9',\r\n          '8',\r\n          '7',\r\n          '6',\r\n          '5',\r\n          '4',\r\n          '3',\r\n          '2'\r\n        )\r\n        var cardTemp = 0,\r\n          i,\r\n          valnum\r\n        for (i = 0; i < 17; i++) {\r\n          cardTemp += card.substr(i, 1) * arrInt[i]\r\n        }\r\n        valnum = arrCh[cardTemp % 11]\r\n        if (valnum == card.substr(17, 1).toLocaleUpperCase()) {\r\n          return true\r\n        }\r\n        return false\r\n      }\r\n      return false\r\n    }\r\n\r\n    // 15位转18位身份证号\r\n    function changeFivteenToEighteen(card) {\r\n      if (card.length == '15') {\r\n        var arrInt = new Array(\r\n          7,\r\n          9,\r\n          10,\r\n          5,\r\n          8,\r\n          4,\r\n          2,\r\n          1,\r\n          6,\r\n          3,\r\n          7,\r\n          9,\r\n          10,\r\n          5,\r\n          8,\r\n          4,\r\n          2\r\n        )\r\n        var arrCh = new Array(\r\n          '1',\r\n          '0',\r\n          'X',\r\n          '9',\r\n          '8',\r\n          '7',\r\n          '6',\r\n          '5',\r\n          '4',\r\n          '3',\r\n          '2'\r\n        )\r\n        var cardTemp = 0,\r\n          i\r\n        card = card.substr(0, 6) + '19' + card.substr(6, card.length - 6)\r\n        for (i = 0; i < 17; i++) {\r\n          cardTemp += card.substr(i, 1) * arrInt[i]\r\n        }\r\n        card += arrCh[cardTemp % 11]\r\n        return card\r\n      }\r\n      return card\r\n    }\r\n    return validateIdCard(idCard)\r\n  }\r\n  // 验证护照（包含香港、澳门）\r\n  isPassport(val) {\r\n    return /(^[EeKkGgDdSsPpHh]\\d{8}$)|(^(([Ee][a-fA-F])|([DdSsPp][Ee])|([Kk][Jj])|([Mm][Aa])|(1[45]))\\d{7}$)/g.test(val)\r\n  }\r\n  // 手机号\r\n  isPhone(phone) {\r\n    return /^1(3\\d|4\\d|5\\d|6\\d|7\\d|8\\d|9\\d)\\d{8}$/g.test(phone)\r\n  }\r\n  // 验证手机号中国(严谨), 根据工信部2019年最新公布的手机号段\r\n  isPhoneStrict(phone) {\r\n    return /^(?:(?:\\+|00)86)?1(?:(?:3[\\d])|(?:4[5-7|9])|(?:5[0-3|5-9])|(?:6[5-7])|(?:7[0-8])|(?:8[\\d])|(?:9[1|8|9]))\\d{8}$/g.test(phone);\r\n  }\r\n  // 验证座机电话(国内),如: 0341-86091234\r\n  isLandlineTelephone(phone) {\r\n    return /\\d{3}-\\d{8}|\\d{4}-\\d{7}/g.test(phone)\r\n  }\r\n  // 姓名\r\n  isName(name) {\r\n    let ChinaTxtReg = new RegExp('^[\\u4e00-\\u9fa5]+$')\r\n    return ChinaTxtReg.test(name)\r\n  }\r\n  // 英文\r\n  isEnglish(val) {\r\n    let reg = /^[a-zA-Z]+$/\r\n    return reg.test(val)\r\n  }\r\n  // 整数\r\n  isInteger(val) {\r\n    let reg = /^[-+]?\\d*$/\r\n    return reg.test(val)\r\n  }\r\n  // 密码 a-z A-Z 0-9  long 6 < val < 21\r\n  isPassword(val) {\r\n    let reg = /^[a-zA-Z0-9_]+$/;\r\n    return reg.test(val) && val.length > 5 && val.length < 21\r\n  }\r\n  // 邮件 email\r\n  isEmail(val) {\r\n    let reg = /^\\w+([-+.]\\w+)*@\\w+([-.]\\w+)*\\.\\w+([-.]\\w+)*$/;\r\n    return reg.test(val)\r\n  }\r\n  // 地址 链接\r\n  isUrl(val) {\r\n    const str = \"^((https|http|ftp|rtsp|mms)://)?[a-z0-9A-Z]{3}\\.[a-z0-9A-Z][a-z0-9A-Z]{0,61}?[a-z0-9A-Z]\\.com|net|cn|cc (:s[0-9]{1-4})?/$\";\r\n    const reg = new RegExp(str);\r\n    return reg.test(val)\r\n  }\r\n  // 价格、金额  带小数的正数，小数点后最多两位\r\n  isMoney(val) {\r\n    const reg = /^(([1-9][0-9]*)|(([0]\\.\\d{1,2}|[1-9][0-9]*\\.\\d{1,2})))$/;\r\n    return reg.test(val)\r\n  }\r\n  // 验证邮政编码(中国)\r\n  isPostcode(val) {\r\n    return /^(0[1-7]|1[0-356]|2[0-7]|3[0-6]|4[0-7]|5[1-7]|6[1-7]|7[0-5]|8[013-6])\\d{4}$/g.test(val)\r\n  }\r\n  // 验证微信号，6至20位，以字母开头，字母，数字，减号，下划线\r\n  isWeChatNum(val) {\r\n    return /^[a-zA-Z][-_a-zA-Z0-9]{5,19}$/g.test(val);\r\n  }\r\n  // 验证16进制颜色\r\n  isColor16(val) {\r\n    return /^#?([a-fA-F0-9]{6}|[a-fA-F0-9]{3})$/g.test(val);\r\n  }\r\n  // 验证火车车次\r\n  isTrainNum(val) {\r\n    return /^[GCDZTSPKXLY1-9]\\d{1,4}$/g.test(val);\r\n  }\r\n  // 验证手机机身码(IMEI)\r\n  isIMEI(val) {\r\n    return /^\\d{15,17}$/g.test(val)\r\n  }\r\n  // 验证必须带端口号的网址(或ip)\r\n  isHttpAndPort(val) {\r\n    return /^((ht|f)tps?:\\/\\/)?[\\w-]+(\\.[\\w-]+)+:\\d{1,5}\\/?$/g.test(val)\r\n  }\r\n  // 验证统一社会信用代码\r\n  isCreditCode(val) {\r\n    return /^[0-9A-HJ-NPQRTUWXY]{2}\\d{6}[0-9A-HJ-NPQRTUWXY]{10}$/g.test(val)\r\n  }\r\n  // 验证迅雷链接\r\n  isThunderLink(val) {\r\n    return /^thunderx?:\\/\\/[a-zA-Z\\d]+=$/g.test(val);\r\n  }\r\n  // 验证window\"文件夹\"路径\r\n  isWindowsFolderPath(val) {\r\n    return /^[a-zA-Z]:\\\\(?:\\w+\\\\?)*$/g.test(val);\r\n  }\r\n  // 验证window下\"文件\"路径\r\n  isWindowsFilePath(val) {\r\n    return /^[a-zA-Z]:\\\\(?:\\w+\\\\)*\\w+\\.\\w+$/g.test(val);\r\n  }\r\n  // 验证版本号格式必须为X.Y.Z\r\n  isVersion(val) {\r\n    return /^\\d+(?:\\.\\d+){2}$/g.test(val);\r\n  }\r\n  // 验证视频链接地址（视频格式可按需增删）\r\n  isVideoUrl(val) {\r\n    return /^https?:\\/\\/(.+\\/)+.+(\\.(swf|avi|flv|mpg|rm|mov|wav|asf|3gp|mkv|rmvb|mp4))$/i.test(val);\r\n  }\r\n  // 验证图片链接地址（图片格式可按需增删）\r\n  isImageUrl(val) {\r\n    return /^https?:\\/\\/(.+\\/)+.+(\\.(gif|png|jpg|jpeg|webp|svg|psd|bmp|tif))$/i.test(val);\r\n  }\r\n  // 验证银行卡号（10到30位, 覆盖对公/私账户, 参考微信支付）\r\n  isAccountNumber(val) {\r\n    return /^[1-9]\\d{9,29}$/g.test(val)\r\n  }\r\n  // 验证车牌号(新能源+非新能源)\r\n  isLicensePlateNumber(val) {\r\n    return /^(?:[京津沪渝冀豫云辽黑湘皖鲁新苏浙赣鄂桂甘晋蒙陕吉闽贵粤青藏川宁琼使领 A-Z]{1}[A-HJ-NP-Z]{1}(?:(?:[0-9]{5}[DF])|(?:[DF](?:[A-HJ-NP-Z0-9])[0-9]{4})))|(?:[京津沪渝冀豫云辽黑湘皖鲁新苏浙赣鄂桂甘晋蒙陕吉闽贵粤青藏川宁琼使领 A-Z]{1}[A-Z]{1}[A-HJ-NP-Z0-9]{4}[A-HJ-NP-Z0-9 挂学警港澳]{1})$/g.test(val);\r\n  }\r\n  // 判读是否为外链 \r\n  isExternal(path) {\r\n    return /^(https?:|mailto:|tel:)/.test(path);\r\n  }\r\n}\r\n\r\nmodule.exports = RegModules\n\n//# sourceURL=webpack:///./src/regModule.js?");

/***/ })

/******/ });