/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./index.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./index.js":
/*!******************!*\
  !*** ./index.js ***!
  \******************/
/*! exports provided: devtools, regModules */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"devtools\", function() { return devtools; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"regModules\", function() { return regModules; });\nconst RegModules = __webpack_require__(/*! ./src/regModule */ \"./src/regModule.js\")\nconst DevTools = __webpack_require__(/*! ./src/devTools */ \"./src/devTools.js\")\n// const {ReactComponents} = require('./src/reactComponets')\n\n// html引入 import 方式替换require处理\n// import DevTools from './src/devTools'\n// ...\n\nlet devtools = new DevTools()\nlet regModules = new RegModules()\n\n// console.log(ReactComponents, 'ReactComponents');\n\nconsole.log(devtools, 'npm');\n// html引入\n// export default { devtools }\n// module.exports =\n\n\n//# sourceURL=webpack:///./index.js?");

/***/ }),

/***/ "./src/devTools.js":
/*!*************************!*\
  !*** ./src/devTools.js ***!
  \*************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("class DevTools {\n  // 算法类\n  // 根据数组生成树结构\n  /*\n  const comments1 = [\n    { id: 1, parentId: null },\n    { id: 2, parentId: 1 },\n    { id: 3, parentId: 1 },\n    { id: 4, parentId: 2 },\n    { id: 5, parentId: 4 }\n  ];\n  */\n  generateTree(items, parentId = null, selectVal = 'parentId') {\n    return items.filter(item => item[selectVal] === parentId).map(i => { return { ...i, children: this.generateTree(items, i.id, selectVal) } })\n  }\n\n  // 全等判断 ---> 在两个变量之间进行深度比较以确定它们是否全等。\n  // allEquals({ a: [2, { e: 3 }], b: [4], c: 'foo' }, { a: [2, { e: 3 }], b: [4], c: 'foo' }); // true\n  allEquals(a, b) {\n    if (a === b) return true;\n    if (a instanceof Date && b instanceof Date) return a.getTime() === b.getTime();\n    if (!a || !b || (typeof a !== 'object' && typeof b !== 'object')) return a === b;\n    if (a.prototype !== b.prototype) return false;\n    let keys = Object.keys(a);\n    if (keys.length !== Object.keys(b).length) return false;\n    return keys.every(function (k) { return allEquals(a[k], b[k]) });\n  };\n\n\n  // time\n\n  // 返回当前24小时制时间的字符串\n  // getColonTimeFromDate3(new Date());\n  getColonTimeFromDate(date) {\n    return date.toTimeString().slice(0, 8);\n  }\n\n  // 返回日期间的天数\n  // getDaysDiffBetweenDates4(new Date('2019-01-01'), new Date('2019-10-14'));\n  getDaysDiffBetweenDates(dateInitial, dateFinal) {\n    return (dateFinal - dateInitial) / (1000 * 3600 * 24);\n  }\n\n  // 时间格式转化年 -- 接受 ms 级的时间戳\n  changeTimeYear(time) {\n    time = parseInt(time) //将传入的时间戳的值转化为Number\n    time = new Date(time);\n    const year = time.getFullYear()\n    const month = time.getMonth() + 1\n    const date = time.getDate()\n    return (\n      year +\n      '-' +\n      (month >= 10 ? month : '0' + month) +\n      '-' +\n      (date >= 10 ? date : '0' + date) +\n      ' '\n    )\n  }\n\n  // 格式化 天:时:分:秒 参数 - 剩余时间戳 - 单位为 S\n  formateSeconds(surPlusTime) {\n    let secondTime = parseInt(surPlusTime) //将传入的秒的值转化为Number\n    let min = 0 // 初始化分\n    let h = 0 // 初始化小时\n    let d = 0 // 初始化天\n    let result = ''\n    if (secondTime > 60) {\n      //如果秒数大于60，将秒数转换成整数\n      min = parseInt(secondTime / 60) //获取分钟，除以60取整数，得到整数分钟\n      secondTime = parseInt(secondTime % 60) //获取秒数，秒数取佘，得到整数秒数\n      if (min > 60) {\n        //如果分钟大于60，将分钟转换成小时\n        h = parseInt(min / 60) //获取小时，获取分钟除以60，得到整数小时\n        min = parseInt(min % 60) //获取小时后取佘的分，获取分钟除以60取佘的分\n        if (h > 23) {\n          d = parseInt(h / 24) // 获取天，获取分钟除以24，得到整数天\n          h = parseInt(h % 24) // 获取天后取佘的小时，获取时除24取佘的时\n        }\n      }\n    }\n    result = `${d.toString().padStart(2, '0')}:${h\n      .toString()\n      .padStart(2, '0')}:${min\n        .toString()\n        .padStart(2, '0')}:${secondTime.toString().padStart(2, '0')}`\n    return result\n    // return 00:00:00:00\n  }\n  // 时间戳转化为当前时间 \n  formatNowTime(time) {\n    function add0(m) { return m < 10 ? '0' + m : m }\n    time = parseInt(time) //将传入的时间戳的值转化为Number\n    time = new Date(time);\n    var y = time.getFullYear();\n    var m = time.getMonth() + 1;\n    var d = time.getDate();\n    var h = time.getHours();\n    var mm = time.getMinutes();\n    var s = time.getSeconds();\n    return y + '-' + add0(m) + '-' + add0(d) + ' ' + add0(h) + ':' + add0(mm) + ':' + add0(s);\n  }\n\n\n  // browser\n\n  // 检查页面底部是否可见\n  bottomVisible() {\n    return (document.documentElement.clientHeight + window.scrollY >=\n      (document.documentElement.scrollHeight || document.documentElement.clientHeight))\n  }\n\n  // 检查当前标签页是否活动\n  isBrowserTabFocused() {\n    return !document.hidden;\n  }\n\n  // 平滑滚动至顶部 --> 该代码段可用于平滑滚动到当前页面的顶部。\n  scrollToTop() {\n    const c = document.documentElement.scrollTop || document.body.scrollTop;\n    if (c > 0) {\n      window.requestAnimationFrame(scrollToTop);\n      window.scrollTo(0, c - c / 8);\n    }\n  };\n\n  // 滚动到指定元素区域 --> 该代码段可将指定元素平滑滚动到浏览器窗口的可见区域。\n  // smoothScroll11('#fooBar');\n  smoothScroll(el) {\n    document.querySelector(el).scrollIntoView({\n      behavior: 'smooth'\n    });\n  }\n\n  // 取当前页面的滚动位置\n  //  getScrollPosition(); // {x: 0, y: 200}\n  // el 为选定 dom 默认 window\n  // 返回 {x: , y: }\n  getScrollPosition(el = window) {\n    return {\n      x: el.pageXOffset !== undefined ? el.pageXOffset : el.scrollLeft,\n      y: el.pageYOffset !== undefined ? el.pageYOffset : el.scrollTop\n    }\n  }\n\n  // 功能描述：一些业务场景，如弹框出现时，需要禁止页面滚动，这是兼容安卓和 iOS 禁止页面滚动的解决方案\n  // 固定滚动条  接受一个y轴 Number\n  preventScroll(scrollNum) {\n    // 存储当前滚动位置\n    scrollNum = window.scrollY;\n\n    // 将可滚动区域固定定位，可滚动区域高度为 0 后就不能滚动了\n    document.body.style[\"overflow-y\"] = \"hidden\";\n    document.body.style.position = \"fixed\";\n    document.body.style.width = \"100%\";\n    document.body.style.top = -scrollNum + \"px\";\n    // document.body.style['overscroll-behavior'] = 'none'\n  }\n  // 恢复滚动条  接受一个y轴 Number  如果配合 preventScroll 方法使用需要现将 固定前的滚动条高度记录，再恢复时赋值给 recoverScroll 方法\n  recoverScroll(scrollNum) {\n    document.body.style[\"overflow-y\"] = \"auto\";\n    document.body.style.position = \"static\";\n    // document.querySelector('body').style['overscroll-behavior'] = 'none'\n\n    window.scrollTo(0, scrollNum);\n  }\n\n  // 检查指定的元素在视口中是否可见\n\n  // elementIsVisibleInViewport(el); // 需要左右可见\n  // elementIsVisibleInViewport(el, true); // 需要全屏(上下左右)可以见\n\n  elementIsVisibleInViewport(el, partiallyVisible = false) {\n    const { top, left, bottom, right } = el.getBoundingClientRect();\n    const { innerHeight, innerWidth } = window;\n    return partiallyVisible\n      ? ((top > 0 && top < innerHeight) || (bottom > 0 && bottom < innerHeight)) &&\n      ((left > 0 && left < innerWidth) || (right > 0 && right < innerWidth))\n      : top >= 0 && left >= 0 && bottom <= innerHeight && right <= innerWidth;\n  }\n\n  // 某个元素开启全屏 接受一个 dom 作为参数\n  launchFullscreen(el) {\n    if (el.requestFullscreen) {\n      el.requestFullscreen()\n    } else if (el.mozRequestFullScreen) {\n      el.mozRequestFullScreen()\n    } else if (el.msRequestFullscreen) {\n      el.msRequestFullscreen()\n    } else if (el.webkitRequestFullscreen) {\n      el.webkitRequestFullScreen()\n    }\n  }\n\n  // 关闭全屏模式\n  exitFullscreen() {\n    if (document.exitFullscreen) {\n      document.exitFullscreen()\n    } else if (document.msExitFullscreen) {\n      document.msExitFullscreen()\n    } else if (document.mozCancelFullScreen) {\n      document.mozCancelFullScreen()\n    } else if (document.webkitExitFullscreen) {\n      document.webkitExitFullscreen()\n    }\n  }\n\n\n  // js\n\n  // 将一组表单元素转化为对象\n  /*\n    example\n    formToObject(document.querySelector('#form')); \n        { email: 'test@email.com', name: 'Test Name' }\n  */\n  formToObject(form) {\n    return Array.from(new FormData(form)).reduce(\n      (acc, [key, value]) => ({\n        ...acc,\n        [key]: value\n      }),\n      {}\n    );\n  }\n\n  // 将字符串复制到剪贴板\n  /*\n    example: \n    copyToClipboard('Lorem ipsum'); \n      'Lorem ipsum' copied to clipboard\n  */\n  copyToClipboard(str) {\n    const el = document.createElement('textarea');\n    el.value = str;\n    el.setAttribute('readonly', '');\n    el.style.position = 'absolute';\n    el.style.left = '-9999px';\n    document.body.appendChild(el);\n    const selected =\n      document.getSelection().rangeCount > 0 ? document.getSelection().getRangeAt(0) : false;\n    el.select();\n    document.execCommand('copy');\n    document.body.removeChild(el);\n    if (selected) {\n      document.getSelection().removeAllRanges();\n      document.getSelection().addRange(selected);\n    }\n  }\n\n  // 金钱格式化，三位加逗号\n  formatMoney(val) {\n    return val.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")\n  }\n  // B转换到KB,MB,GB并保留两位小数  参数接受一个 b 字节 为单位的值\n  formatFileSize(fileSize) {\n    let temp;\n    if (fileSize < 1024) {\n      return fileSize + 'B';\n    } else if (fileSize < (1024 * 1024)) {\n      temp = fileSize / 1024;\n      temp = temp.toFixed(2);\n      return temp + 'KB';\n    } else if (fileSize < (1024 * 1024 * 1024)) {\n      temp = fileSize / (1024 * 1024);\n      temp = temp.toFixed(2);\n      return temp + 'MB';\n    } else {\n      temp = fileSize / (1024 * 1024 * 1024);\n      temp = temp.toFixed(2);\n      return temp + 'GB';\n    }\n  }\n\n  // 去除空格\n  // str 待处理字符串\n  // type 去除空格类型 1-所有空格  2-前后空格  3-前空格 4-后空格 默认为1\n  strTrim(str, type = 1) {\n    if (type && type !== 1 && type !== 2 && type !== 3 && type !== 4) return;\n    switch (type) {\n      case 1:\n        return str.replace(/\\s/g, \"\");\n      case 2:\n        return str.replace(/(^\\s)|(\\s*$)/g, \"\");\n      case 3:\n        return str.replace(/(^\\s)/g, \"\");\n      case 4:\n        return str.replace(/(\\s$)/g, \"\");\n      default:\n        return str;\n    }\n  }\n\n  // 检测移动/PC设备\n  detectDeviceType() {\n    return /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)\n      ? 'Mobile'\n      : 'Desktop';\n  }\n\n  // 当前设备是否是 android\n  isAndroidPlatform() {\n    const u = navigator.userAgent\n    const isAndroid = u.indexOf('Android') > -1 || u.indexOf('Adr') > -1\n    return isAndroid\n  }\n\n  // 获取地址栏参数\n  getUrlData(url) {\n    if (url.slice(url.length - 2, url.length) === '#/') url = url.slice(0, url.length - 2)\n    let o = {}\n    let params = url.split('?')[1]\n    if (!params) return {}\n    params.split('&').map(item => {\n      let r = item.split('=')\n      o[item.split('=')[0]] = r[1]\n    })\n    return o\n  }\n\n  // 上传文件\n  uploadImage({ url, file }) {\n    let fromData = new FormData();\n    fromData.append('imgFile', file);\n    return new Promise((resolve, reject) => {\n      axios({\n        method: 'post',\n        url: url,\n        data: fromData,\n        headers: {\n          'Content-Type': 'multipart/form-data'\n        }\n      }).then(res => {\n        resolve(res.data);\n      }).catch(e => {\n        reject(e)\n      })\n    })\n  }\n\n  // rem*16px(以蓝湖rem设置为标准 设置16px的rem就是 *8)\n  setDomRem(num = 8) {\n    (function (designWidth, maxWidth) {\n      var doc = document,\n        win = window;\n      var docEl = doc.documentElement;\n      var tid;\n      var rootItem, rootStyle;\n\n      function refreshRem() {\n        var width = docEl.getBoundingClientRect().width;\n        if (!maxWidth) {\n          maxWidth = 540;\n        }\n        ;\n        if (width > maxWidth) {\n          width = maxWidth;\n        }\n        //与淘宝做法不同，直接采用简单的rem换算方法1rem=100px\n        var rem = width * +num / designWidth;\n        //兼容UC开始\n        rootStyle = \"html{font-size:\" + rem + 'px !important}';\n        rootItem = document.getElementById('rootsize') || document.createElement(\"style\");\n        if (!document.getElementById('rootsize')) {\n          document.getElementsByTagName(\"head\")[0].appendChild(rootItem);\n          rootItem.id = 'rootsize';\n        }\n        if (rootItem.styleSheet) {\n          rootItem.styleSheet.disabled || (rootItem.styleSheet.cssText = rootStyle)\n        } else {\n          try {\n            rootItem.innerHTML = rootStyle\n          } catch (f) {\n            rootItem.innerText = rootStyle\n          }\n        }\n        //兼容UC结束\n        docEl.style.fontSize = rem + \"px\";\n      };\n      refreshRem();\n\n      win.addEventListener(\"resize\", function () {\n        clearTimeout(tid); //防止执行两次\n        tid = setTimeout(refreshRem, 300);\n      }, false);\n\n      win.addEventListener(\"pageshow\", function (e) {\n        if (e.persisted) { // 浏览器后退的时候重新计算\n          clearTimeout(tid);\n          tid = setTimeout(refreshRem, 300);\n        }\n      }, false);\n\n      if (doc.readyState === \"complete\") {\n        doc.body.style.fontSize = \"16px\";\n      } else {\n        doc.addEventListener(\"DOMContentLoaded\", function (e) {\n          doc.body.style.fontSize = \"16px\";\n        }, false);\n      }\n    })(375, 750);\n  }\n\n  // 生产环境不显示 console.log\n  rewirteLog() {\n    console.log = (function (log) {\n      // webpack.config.js 中必须设置好正确的 mode\n      return  true ? log : undefined\n    }(console.log))\n  }\n\n  // 增强版typeOf typeOf 关键字对于null，date 都会认为是Object，不准确\n  typeOf(data) {\n    let res = Object.prototype.toString.call(data).split(' ')[1]\n    return res.slice(0, res.length - 1)\n  }\n\n  // 深拷贝\n  deepClone(target) {\n    let result;\n    if (typeof target === 'object') {\n      if (Array.isArray(target)) {\n        result = [];\n        for (let i in target) {\n          result.push(deepClone(target[i]))\n        }\n      } else if (target === null) {\n        result = null;\n      } else if (target.constructor === RegExp) {\n        result = target;\n      } else {\n        result = {};\n        for (let i in target) {\n          result[i] = deepClone(target[i]);\n        }\n      }\n    } else {\n      result = target;\n    }\n    return result;\n  }\n\n  // 启用图片懒加载\n  // 需要设置html中的img src为空，data-src属性为目标路径\n  // 必须等待加载目标的 data-src 属性赋值完毕，再执行此方法\n  lazyImage(className = null) {\n    // 懒记载图片列表，将伪数组转为数组，以便可以使用数组的api      \n    let imageElements = Array.prototype.slice.call(className ? document.querySelectorAll(className) : document.getElementsByTagName('img')), _throttleFn\n    // 只针对具有参数的值进行处理\n    imageElements = imageElements.filter(item => item.dataset.src)\n    init()\n    function inViewShow() {\n      let len = imageElements.length\n      for (let i = 0; i < len; i++) {\n        let imageElement = imageElements[i]\n        const rect = imageElement.getBoundingClientRect()\n        // 出现在视野的时候加载图片        \n        if (rect.top < document.documentElement.clientHeight) {\n          imageElement.src = imageElement.dataset.src\n          // 移除掉已经显示的          \n          imageElements.splice(i, 1)\n          len--\n          i--\n          if (imageElements.length === 0) {\n            // 如果全部都加载完 则去掉滚动事件监听            \n            document.removeEventListener('scroll', _throttleFn)\n          }\n        }\n      }\n    }\n    // 节流\n    function throttle(fn, delay = 100, mustRun = 30) {\n      let t_start = null\n      let timer = null\n      let context = this\n      return function () {\n        let t_current = +(new Date())\n        let args = Array.prototype.slice.call(arguments)\n        clearTimeout(timer)\n        if (!t_start) {\n          t_start = t_current\n        }\n        if (t_current - t_start > mustRun) {\n          fn.apply(context, args)\n          t_start = t_current\n        } else {\n          timer = setTimeout(() => {\n            fn.apply(context, args)\n          }, delay)\n        }\n      }\n    }\n    function init() {\n      // 通过IntersectionObserver api判断图片是否出现在可视区域内，不需要监听Scroll来判断      \n      if (\"IntersectionObserver\" in window) {\n        let lazyImageObserver = new IntersectionObserver((entries, observer) => {\n          entries.forEach((entry, index) => {\n            // 如果元素可见            \n            if (entry.isIntersecting) {\n              let lazyImage = entry.target\n              lazyImage.src = lazyImage.dataset.src\n              lazyImage.classList.remove(\"lazy-image\")\n              lazyImageObserver.unobserve(lazyImage)\n              imageElements.splice(index, 1)\n            }\n          })\n        })\n        imageElements.forEach(function (lazyImage) {\n          lazyImageObserver.observe(lazyImage);\n        })\n      } else {\n        inViewShow()\n        _throttleFn = throttle(inViewShow)\n        document.addEventListener('scroll', _throttleFn.bind(this))\n      }\n    }\n  }\n\n  // 防抖 执行函数,间隔时间,是否立即执行一次\n  debounce(func, wait, immediate = true) {\n    var timeout, result;\n    var debounced = function () {\n      var context = this;\n      var args = arguments;\n      if (timeout) clearTimeout(timeout);\n      if (immediate) {\n        // 如果已经执行过，不再执行\n        var callNow = !timeout;\n        timeout = setTimeout(function () {\n          timeout = null;\n        }, wait)\n        if (callNow) result = func.apply(context, args)\n      } else {\n        timeout = setTimeout(function () {\n          func.apply(context, args)\n        }, wait);\n      }\n      return result;\n    };\n    debounced.cancel = function () {\n      clearTimeout(timeout);\n      timeout = null;\n    };\n    return debounced;\n  }\n\n  // 节流 执行函数,间隔时间,设置{leading: 调用后是否立即执行一次,trailing: 结束后是否还要执行一次} 默认都为true，但都不能为false\n  throttle(func, wait, options) {\n    var timeout, context, args\n    // 上一次的时间点\n    var previous = 0\n    if (!options) options = {}\n\n    var later = function () {\n      previous = options.leading === false ? 0 : new Date().getTime()\n      timeout = null\n      func.apply(context, args)\n      if (!timeout) context = args = null\n    }\n\n    var throttled = function () {\n      // 拿到当前时间的时间戳\n      var now = new Date().getTime()\n      // 如果 上一次时间为0 且 不设置立即执行，将当前时间赋值给上次时间\n      if (!previous && options.leading === false) previous = now\n      // 当前空档时间 设定等待值 - (当前 - 上一次时间)\n      var remaining = wait - (now - previous)\n      context = this\n      args = arguments\n      // console.log(arguments, 'arguments');\n      if (remaining <= 0 || remaining > wait) {\n        if (timeout) {\n          clearTimeout(timeout)\n          timeout = null\n        }\n        previous = now\n        func.apply(context, args)\n        if (!timeout) context = args = null\n      } else if (!timeout && options.trailing !== false) {\n        timeout = setTimeout(later, remaining)\n      }\n    }\n\n    throttled.cancel = function () {\n      clearTimeout(timeout)\n      previous = 0\n      timeout = null\n    }\n    return throttled\n  }\n\n  // 无限滚动\n  /**\n   * \n   * @param {目标节点} dom \n   * @param {Function} cb \n   * @param {可选：关闭监听(只有在监听滚动条时才会有效，否则无效，可忽略(针对低版本浏览器启用监听滚动条方式进行处理))} devtools.infinityScrollIng.closeMonitor()\n   * \n   * \n   * example:\n   * devtools.infinityScrollIng(document.querySelector('.bottomScrollBar'), ()=>{\n   * // 回调第一行必须设置 infinityScrollIng 的bol 属性为 false，意味着已经进程已经开始，必须等待结束(失败或者成功)才可以重新为true，才可以进行下一次的回调触发\n   * devtools.infinityScrollIng.open = false\n   * //  ...some code\n   * devtools.infinityScrollIng.open = true // done\n   * })\n   */\n  infinityScrolling(dom, cb) {\n    this.infinityScrolling.bol = true\n    let throttleFn\n    //  需要一个外界bol判断是否加载完毕 不完毕不再次触发\n    if ('IntersectionObserver' in window) {\n      let intersectionOb = new IntersectionObserver(entry => {\n        if (!this.infinityScrolling.bol) return\n        // 1 - 可视范围内 0 - 不在可视范围内\n        if (entry[0].intersectionRatio) cb()\n      })\n      // 对 dom 启用监听\n      intersectionOb.observe(dom)\n    } else {\n      // 启用节流 100ms\n      throttleFn = devtools.throttle(monitorScroll, 100)\n      // 开启监听\n      document.addEventListener('scroll', throttleFn)\n    }\n    // 关闭监听 scroll监听时\n    this.infinityScrolling.closeMonitor = function () {\n      if ('IntersectionObserver' in window) return\n      // 关闭节流\n      throttleFn.cancel()\n      // 取消监听\n      document.removeEventListener('scroll', throttleFn)\n    }\n    // 监听滚动条要做的事情\n    function monitorScroll() {\n      if (!this.infinityScrolling.bol) return\n      // 检查指定的元素在视口中是否可见\n      if (devtools.elementIsVisibleInViewport(dom, true)) cb()\n    }\n  }\n\n\n  // html\n\n  // 从字符串中删除HTML / XML标签。\n  // deleteHTMLTags('<p><em>lorem</em> <strong class=\"asasasas\">ipsum</strong></p>'\n  deleteHTMLTags(str) {\n    return str.replace(/<[^>]*>/g, '')\n  }\n\n\n  // css\n\n  // 返回指定元素的生效样式\n  // getDomStyle(document.querySelector('p'), 'font-size')\n  getDomStyle(el, ruleName) {\n    return getComputedStyle(el)[ruleName];\n  }\n\n\n  // app&js\n  // JSBriged 交互处理方式 ios/android 通用\n  /*\n    appMethod(name, data).then(res=>{\n      // 回调返回数据\n    })\n  */\n  appMethod(name, data = null) {\n    /**\n     * name: 事件名\n     * data: 参数 - 仅有调app事件持有\n     */\n    return new Promise(function (reslove, reject) {\n      if (!window.setupWebViewJavascriptBridge) return reject('请先将 JSBriged.js 引入！')\n      window.setupWebViewJavascriptBridge(function (bridge) {\n        bridge.callHandler(name, data, function (result) {\n          reslove(result)\n        })\n      })\n    })\n  }\n}\n\nmodule.exports = DevTools\n\n//# sourceURL=webpack:///./src/devTools.js?");

/***/ }),

/***/ "./src/regModule.js":
/*!**************************!*\
  !*** ./src/regModule.js ***!
  \**************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("class RegModules {\n  // 身份证\n  isIdCard(idCard) {\n    if (typeof idCard === 'number') idCard = parseFloat(idCard) || String(idCard)\n    idCard = idCard.trim()\n    function validateIdCard(idCard) {\n      var vcity = {\n        11: '北京',\n        12: '天津',\n        13: '河北',\n        14: '山西',\n        15: '内蒙古',\n        21: '辽宁',\n        22: '吉林',\n        23: '黑龙江',\n        31: '上海',\n        32: '江苏',\n        33: '浙江',\n        34: '安徽',\n        35: '福建',\n        36: '江西',\n        37: '山东',\n        41: '河南',\n        42: '湖北',\n        43: '湖南',\n        44: '广东',\n        45: '广西',\n        46: '海南',\n        50: '重庆',\n        51: '四川',\n        52: '贵州',\n        53: '云南',\n        54: '西藏',\n        61: '陕西',\n        62: '甘肃',\n        63: '青海',\n        64: '宁夏',\n        65: '新疆',\n        71: '台湾',\n        81: '香港',\n        82: '澳门',\n        91: '国外',\n      }\n      //是否为空\n      if (idCard === '') {\n        return false\n      }\n      //校验长度，类型\n      if (isCardNo(idCard) === false) {\n        return false\n      }\n      //检查省份\n      if (checkProvince(idCard, vcity) === false) {\n        return false\n      }\n      //校验生日\n      if (checkBirthday(idCard) === false) {\n        return false\n      }\n      //检验位的检测\n      if (checkParity(idCard) === false) {\n        return false\n      }\n      return true\n    }\n\n    // 检查号码是否符合规范，包括长度，类型\n    function isCardNo(card) {\n      //身份证号码为15位或者18位，15位时全为数字，18位前17位为数字，最后一位是校验位，可能为数字或字符X\n      var reg = /(^\\d{15}$)|(^\\d{17}(\\d|X|x)$)/\n      if (reg.test(card) === false) {\n        return false\n      }\n      return true\n    }\n\n    // 取身份证前两位,校验省份\n    function checkProvince(card, vcity) {\n      var province = card.substr(0, 2)\n      if (vcity[province] == undefined) {\n        return false\n      }\n      return true\n    }\n\n    // 检查生日是否正确\n    function checkBirthday(card) {\n      var len = card.length\n      //身份证15位时，次序为省（3位）市（3位）年（2位）月（2位）日（2位）校验位（3位），皆为数字\n      if (len == '15') {\n        var re_fifteen = /^(\\d{6})(\\d{2})(\\d{2})(\\d{2})(\\d{3})$/\n        var arr_data = card.match(re_fifteen)\n        var year = arr_data[2]\n        var month = arr_data[3]\n        var day = arr_data[4]\n        var birthday = new Date('19' + year + '/' + month + '/' + day)\n        return verifyBirthday('19' + year, month, day, birthday)\n      }\n      //身份证18位时，次序为省（3位）市（3位）年（4位）月（2位）日（2位）校验位（4位），校验位末尾可能为X\n      if (len == '18') {\n        var re_eighteen = /^(\\d{6})(\\d{4})(\\d{2})(\\d{2})(\\d{3})([0-9]|X|x)$/\n        var arr_data = card.match(re_eighteen)\n        var year = arr_data[2]\n        var month = arr_data[3]\n        var day = arr_data[4]\n        var birthday = new Date(year + '/' + month + '/' + day)\n        return verifyBirthday(year, month, day, birthday)\n      }\n      return false\n    }\n\n    // 校验日期\n    function verifyBirthday(year, month, day, birthday) {\n      var now = new Date()\n      var now_year = now.getFullYear()\n      //年月日是否合理\n      if (\n        birthday.getFullYear() == year &&\n        birthday.getMonth() + 1 == month &&\n        birthday.getDate() == day\n      ) {\n        //判断年份的范围（0岁到100岁之间)\n        var time = now_year - year\n        if (time >= 0 && time <= 100) {\n          return true\n        }\n        return false\n      }\n      return false\n    }\n    // 校验位的检测\n    function checkParity(card) {\n      //15位转18位\n      card = changeFivteenToEighteen(card)\n      var len = card.length\n      if (len == '18') {\n        var arrInt = new Array(\n          7,\n          9,\n          10,\n          5,\n          8,\n          4,\n          2,\n          1,\n          6,\n          3,\n          7,\n          9,\n          10,\n          5,\n          8,\n          4,\n          2\n        )\n        var arrCh = new Array(\n          '1',\n          '0',\n          'X',\n          '9',\n          '8',\n          '7',\n          '6',\n          '5',\n          '4',\n          '3',\n          '2'\n        )\n        var cardTemp = 0,\n          i,\n          valnum\n        for (i = 0; i < 17; i++) {\n          cardTemp += card.substr(i, 1) * arrInt[i]\n        }\n        valnum = arrCh[cardTemp % 11]\n        if (valnum == card.substr(17, 1).toLocaleUpperCase()) {\n          return true\n        }\n        return false\n      }\n      return false\n    }\n\n    // 15位转18位身份证号\n    function changeFivteenToEighteen(card) {\n      if (card.length == '15') {\n        var arrInt = new Array(\n          7,\n          9,\n          10,\n          5,\n          8,\n          4,\n          2,\n          1,\n          6,\n          3,\n          7,\n          9,\n          10,\n          5,\n          8,\n          4,\n          2\n        )\n        var arrCh = new Array(\n          '1',\n          '0',\n          'X',\n          '9',\n          '8',\n          '7',\n          '6',\n          '5',\n          '4',\n          '3',\n          '2'\n        )\n        var cardTemp = 0,\n          i\n        card = card.substr(0, 6) + '19' + card.substr(6, card.length - 6)\n        for (i = 0; i < 17; i++) {\n          cardTemp += card.substr(i, 1) * arrInt[i]\n        }\n        card += arrCh[cardTemp % 11]\n        return card\n      }\n      return card\n    }\n    return validateIdCard(idCard)\n  }\n  // 验证护照（包含香港、澳门）\n  isPassport(val) {\n    return /(^[EeKkGgDdSsPpHh]\\d{8}$)|(^(([Ee][a-fA-F])|([DdSsPp][Ee])|([Kk][Jj])|([Mm][Aa])|(1[45]))\\d{7}$)/g.test(val)\n  }\n  // 手机号\n  isPhone(phone) {\n    return /^1(3\\d|4\\d|5\\d|6\\d|7\\d|8\\d|9\\d)\\d{8}$/g.test(phone)\n  }\n  // 验证手机号中国(严谨), 根据工信部2019年最新公布的手机号段\n  isPhoneStrict(phone) {\n    return /^(?:(?:\\+|00)86)?1(?:(?:3[\\d])|(?:4[5-7|9])|(?:5[0-3|5-9])|(?:6[5-7])|(?:7[0-8])|(?:8[\\d])|(?:9[1|8|9]))\\d{8}$/g.test(phone);\n  }\n  // 验证座机电话(国内),如: 0341-86091234\n  isLandlineTelephone(phone) {\n    return /\\d{3}-\\d{8}|\\d{4}-\\d{7}/g.test(phone)\n  }\n  // 姓名\n  isName(name) {\n    let ChinaTxtReg = new RegExp('^[\\u4e00-\\u9fa5]+$')\n    return ChinaTxtReg.test(name)\n  }\n  // 英文\n  isEnglish(val) {\n    let reg = /^[a-zA-Z]+$/\n    return reg.test(val)\n  }\n  // 整数\n  isInteger(val) {\n    let reg = /^[-+]?\\d*$/\n    return reg.test(val)\n  }\n  // 密码 a-z A-Z 0-9  long 6 < val < 21\n  isPassword(val) {\n    let reg = /^[a-zA-Z0-9_]+$/;\n    return reg.test(val) && val.length > 5 && val.length < 21\n  }\n  // 邮件 email\n  isEmail(val) {\n    let reg = /^\\w+([-+.]\\w+)*@\\w+([-.]\\w+)*\\.\\w+([-.]\\w+)*$/;\n    return reg.test(val)\n  }\n  // 地址 链接\n  isUrl(val) {\n    const str = \"^((https|http|ftp|rtsp|mms)://)?[a-z0-9A-Z]{3}\\.[a-z0-9A-Z][a-z0-9A-Z]{0,61}?[a-z0-9A-Z]\\.com|net|cn|cc (:s[0-9]{1-4})?/$\";\n    const reg = new RegExp(str);\n    return reg.test(val)\n  }\n  // 价格、金额  带小数的正数，小数点后最多两位\n  isMoney(val) {\n    const reg = /^(([1-9][0-9]*)|(([0]\\.\\d{1,2}|[1-9][0-9]*\\.\\d{1,2})))$/;\n    return reg.test(val)\n  }\n  // 验证邮政编码(中国)\n  isPostcode(val) {\n    return /^(0[1-7]|1[0-356]|2[0-7]|3[0-6]|4[0-7]|5[1-7]|6[1-7]|7[0-5]|8[013-6])\\d{4}$/g.test(val)\n  }\n  // 验证微信号，6至20位，以字母开头，字母，数字，减号，下划线\n  isWeChatNum(val) {\n    return /^[a-zA-Z][-_a-zA-Z0-9]{5,19}$/g.test(val);\n  }\n  // 验证16进制颜色\n  isColor16(val) {\n    return /^#?([a-fA-F0-9]{6}|[a-fA-F0-9]{3})$/g.test(val);\n  }\n  // 验证火车车次\n  isTrainNum(val) {\n    return /^[GCDZTSPKXLY1-9]\\d{1,4}$/g.test(val);\n  }\n  // 验证手机机身码(IMEI)\n  isIMEI(val) {\n    return /^\\d{15,17}$/g.test(val)\n  }\n  // 验证必须带端口号的网址(或ip)\n  isHttpAndPort(val) {\n    return /^((ht|f)tps?:\\/\\/)?[\\w-]+(\\.[\\w-]+)+:\\d{1,5}\\/?$/g.test(val)\n  }\n  // 验证统一社会信用代码\n  isCreditCode(val) {\n    return /^[0-9A-HJ-NPQRTUWXY]{2}\\d{6}[0-9A-HJ-NPQRTUWXY]{10}$/g.test(val)\n  }\n  // 验证迅雷链接\n  isThunderLink(val) {\n    return /^thunderx?:\\/\\/[a-zA-Z\\d]+=$/g.test(val);\n  }\n  // 验证window\"文件夹\"路径\n  isWindowsFolderPath(val) {\n    return /^[a-zA-Z]:\\\\(?:\\w+\\\\?)*$/g.test(val);\n  }\n  // 验证window下\"文件\"路径\n  isWindowsFilePath(val) {\n    return /^[a-zA-Z]:\\\\(?:\\w+\\\\)*\\w+\\.\\w+$/g.test(val);\n  }\n  // 验证版本号格式必须为X.Y.Z\n  isVersion(val) {\n    return /^\\d+(?:\\.\\d+){2}$/g.test(val);\n  }\n  // 验证视频链接地址（视频格式可按需增删）\n  isVideoUrl(val) {\n    return /^https?:\\/\\/(.+\\/)+.+(\\.(swf|avi|flv|mpg|rm|mov|wav|asf|3gp|mkv|rmvb|mp4))$/i.test(val);\n  }\n  // 验证图片链接地址（图片格式可按需增删）\n  isImageUrl(val) {\n    return /^https?:\\/\\/(.+\\/)+.+(\\.(gif|png|jpg|jpeg|webp|svg|psd|bmp|tif))$/i.test(val);\n  }\n  // 验证银行卡号（10到30位, 覆盖对公/私账户, 参考微信支付）\n  isAccountNumber(val) {\n    return /^[1-9]\\d{9,29}$/g.test(val)\n  }\n  // 验证车牌号(新能源+非新能源)\n  isLicensePlateNumber(val) {\n    return /^(?:[京津沪渝冀豫云辽黑湘皖鲁新苏浙赣鄂桂甘晋蒙陕吉闽贵粤青藏川宁琼使领 A-Z]{1}[A-HJ-NP-Z]{1}(?:(?:[0-9]{5}[DF])|(?:[DF](?:[A-HJ-NP-Z0-9])[0-9]{4})))|(?:[京津沪渝冀豫云辽黑湘皖鲁新苏浙赣鄂桂甘晋蒙陕吉闽贵粤青藏川宁琼使领 A-Z]{1}[A-Z]{1}[A-HJ-NP-Z0-9]{4}[A-HJ-NP-Z0-9 挂学警港澳]{1})$/g.test(val);\n  }\n  // 判读是否为外链 \n  isExternal(path) {\n    return /^(https?:|mailto:|tel:)/.test(path);\n  }\n}\n\nmodule.exports = RegModules\n\n//# sourceURL=webpack:///./src/regModule.js?");

/***/ })

/******/ });